{
  
    
        "post0": {
            "title": "Title",
            "content": "import matplotlib as mpl import matplotlib.pyplot as plt import seaborn as sns import pandas as pd import numpy as np import requests import time plt.rcParams[&#39;font.family&#39;] = &#39;NanumGothic&#39; plt.rcParams[&#39;font.family&#39;] = &#39;Malgun Gothic&#39; . a=pd.read_csv(&#39;콜택시일년치자료_1.csv&#39;,index_col=0,encoding=&#39;euc-kr&#39;) . b=pd.read_csv(&#39;콜택시일년치자료_2.csv&#39;,index_col=0,encoding=&#39;euc-kr&#39;) . a.head(3) . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 장애등급명 접수방법 . 차량고유번호 . 7598 | 2018-10-04 15:08:20.330 | 2018-10-05 07:00:00.000 | 2018-10-05 07:04:49.537 | 2018-10-05 07:27:37.020 | 노원구 | 중계본동 | 영등포구 | 영등포동 | 4100 | ○ | 뇌병1급 | 바로콜 | . 4202 | 2018-10-04 15:14:30.000 | 2018-10-04 15:15:00.000 | 2018-10-04 16:11:52.473 | 2018-10-04 16:22:43.110 | 중구 | 신당제5동 | 중구 | 중림동 | 1700 | X | 뇌병2급 | 바로콜 | . 1102 | 2018-10-04 15:15:32.000 | 2018-10-04 15:16:00.000 | 2018-10-04 16:05:08.430 | 2018-10-04 16:20:08.560 | 서초구 | 서초4동 | 강남구 | 역삼1동 | 1500 | X | 지적1급 | 바로콜 | . b.head(3) . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 장애등급명 접수방법 . 차량고유번호 . 5750 | 2019-08-16 15:52:21.723 | 2019-08-16 15:52:00.000 | 2019-08-16 17:08:56.793 | 2019-08-16 17:34:08.870 | 강서구 | 방화제1동 | 성남시분당구 | 이매1동 | 5300 | ○ | 지체1급 | 바로콜 | . 5709 | 2019-08-16 15:58:39.577 | 2019-08-16 15:59:00.000 | 2019-08-16 16:14:48.960 | 2019-08-16 16:31:22.263 | 구로구 | 개봉제1동 | 구로구 | 신도림동 | 1500 | X | 뇌병2급 | 바로콜 | . 7662 | 2019-08-16 16:09:58.000 | 2019-08-16 16:10:00.000 | 2019-08-16 16:33:11.157 | 2019-08-16 17:03:47.380 | 동작구 | 흑석동 | 동작구 | 흑석동 | 1500 | ○ | 신장2급 | 바로콜 | . data_load=pd.concat([a,b],ignore_index=True) . data_load.head(3) . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 장애등급명 접수방법 . 0 | 2018-10-04 15:08:20.330 | 2018-10-05 07:00:00.000 | 2018-10-05 07:04:49.537 | 2018-10-05 07:27:37.020 | 노원구 | 중계본동 | 영등포구 | 영등포동 | 4100 | ○ | 뇌병1급 | 바로콜 | . 1 | 2018-10-04 15:14:30.000 | 2018-10-04 15:15:00.000 | 2018-10-04 16:11:52.473 | 2018-10-04 16:22:43.110 | 중구 | 신당제5동 | 중구 | 중림동 | 1700 | X | 뇌병2급 | 바로콜 | . 2 | 2018-10-04 15:15:32.000 | 2018-10-04 15:16:00.000 | 2018-10-04 16:05:08.430 | 2018-10-04 16:20:08.560 | 서초구 | 서초4동 | 강남구 | 역삼1동 | 1500 | X | 지적1급 | 바로콜 | . data_load.shape . (1072577, 12) . data = data_load.copy() . data[&#39;접수일시&#39;]=pd.to_datetime(data[&#39;접수일시&#39;],format=&#39;%Y-%m-%d %H:%M:%S.%f&#39;) . data[&#39;예정일시&#39;]=pd.to_datetime(data[&#39;예정일시&#39;],format=&#39;%Y-%m-%d %H:%M:%S.%f&#39;) data[&#39;배차일시&#39;]=pd.to_datetime(data[&#39;배차일시&#39;],format=&#39;%Y-%m-%d %H:%M:%S.%f&#39;) data[&#39;승차일시&#39;]=pd.to_datetime(data[&#39;승차일시&#39;],format=&#39;%Y-%m-%d %H:%M:%S.%f&#39;) . data[&#39;예정-접수&#39;]=data[&#39;예정일시&#39;]-data[&#39;접수일시&#39;] data[&#39;배차-예정&#39;] = data[&#39;배차일시&#39;] - data[&#39;예정일시&#39;] data[&#39;배차-접수&#39;] = data[&#39;배차일시&#39;] - data[&#39;접수일시&#39;] . data.head(3) . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 장애등급명 접수방법 예정-접수 배차-예정 배차-접수 . 0 | 2018-10-04 15:08:20.330 | 2018-10-05 07:00:00 | 2018-10-05 07:04:49.537 | 2018-10-05 07:27:37.020 | 노원구 | 중계본동 | 영등포구 | 영등포동 | 4100 | ○ | 뇌병1급 | 바로콜 | 15:51:39.670000 | 00:04:49.537000 | 15:56:29.207000 | . 1 | 2018-10-04 15:14:30.000 | 2018-10-04 15:15:00 | 2018-10-04 16:11:52.473 | 2018-10-04 16:22:43.110 | 중구 | 신당제5동 | 중구 | 중림동 | 1700 | X | 뇌병2급 | 바로콜 | 00:00:30 | 00:56:52.473000 | 00:57:22.473000 | . 2 | 2018-10-04 15:15:32.000 | 2018-10-04 15:16:00 | 2018-10-04 16:05:08.430 | 2018-10-04 16:20:08.560 | 서초구 | 서초4동 | 강남구 | 역삼1동 | 1500 | X | 지적1급 | 바로콜 | 00:00:28 | 00:49:08.430000 | 00:49:36.430000 | . data[&#39;승차-접수&#39;] = data[&#39;승차일시&#39;] - data[&#39;접수일시&#39;] #### 대기 시간 data[&#39;승차-예정&#39;] = data[&#39;승차일시&#39;] - data[&#39;예정일시&#39;] data[&#39;승차-배차&#39;] = data[&#39;승차일시&#39;] - data[&#39;배차일시&#39;] . data = data[data[&#39;접수방법&#39;]==&#39;바로콜&#39;] . data.describe() . 요금(원) 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 . count | 944689.000000 | 944689 | 944689 | 944689 | 944689 | 944689 | 944689 | . mean | 2331.092317 | 0 days 01:16:07.788880 | 0 days 00:43:09.361572 | 0 days 01:59:17.150453 | 0 days 02:18:42.273812 | 0 days 01:02:34.484931 | 0 days 00:19:25.123358 | . std | 942.674456 | 0 days 05:07:50.332009 | 0 days 00:35:53.772267 | 0 days 04:59:57.567335 | 0 days 05:00:18.333825 | 0 days 00:37:08.241638 | 0 days 00:08:18.436409 | . min | 1500.000000 | -1 days +23:59:01 | -1 days +00:04:08.960000 | 0 days 00:00:10.050000 | 0 days 00:00:20.463000 | -1 days +00:19:12.530000 | 0 days 00:00:02.860000 | . 25% | 1500.000000 | 0 days 00:00:05 | 0 days 00:14:18.310000 | 0 days 00:20:55.180000 | 0 days 00:40:18.840000 | 0 days 00:34:51.480000 | 0 days 00:13:42.410000 | . 50% | 2000.000000 | 0 days 00:00:21.300000 | 0 days 00:36:48.907000 | 0 days 00:43:32.104000 | 0 days 01:02:13.547000 | 0 days 00:55:29.687000 | 0 days 00:18:33.040000 | . 75% | 3100.000000 | 0 days 00:00:44 | 0 days 01:03:20.083000 | 0 days 01:13:12.586000 | 0 days 01:32:58.856000 | 0 days 01:22:37.880000 | 0 days 00:24:03.176000 | . max | 14100.000000 | 1 days 06:44:52 | 0 days 06:21:46.610000 | 1 days 06:46:08.447000 | 1 days 06:54:44.630000 | 0 days 06:55:57.187000 | 0 days 04:52:22.256000 | . data[&#39;1분&#39;] = 1 data[&#39;1분&#39;] = pd.to_timedelta(data[&#39;1분&#39;], unit=&#39;m&#39;) data[&#39;5분&#39;] = 5 data[&#39;5분&#39;] = pd.to_timedelta(data[&#39;5분&#39;], unit=&#39;m&#39;) data[&#39;0분&#39;] = 0 data[&#39;0분&#39;] = pd.to_timedelta(data[&#39;0분&#39;], unit=&#39;m&#39;) . data.head(3) . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 접수방법 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 1분 5분 0분 . 0 | 2018-10-04 15:08:20.330 | 2018-10-05 07:00:00 | 2018-10-05 07:04:49.537 | 2018-10-05 07:27:37.020 | 노원구 | 중계본동 | 영등포구 | 영등포동 | 4100 | ○ | ... | 바로콜 | 15:51:39.670000 | 00:04:49.537000 | 15:56:29.207000 | 16:19:16.690000 | 00:27:37.020000 | 00:22:47.483000 | 00:01:00 | 00:05:00 | 0 days | . 1 | 2018-10-04 15:14:30.000 | 2018-10-04 15:15:00 | 2018-10-04 16:11:52.473 | 2018-10-04 16:22:43.110 | 중구 | 신당제5동 | 중구 | 중림동 | 1700 | X | ... | 바로콜 | 00:00:30 | 00:56:52.473000 | 00:57:22.473000 | 01:08:13.110000 | 01:07:43.110000 | 00:10:50.637000 | 00:01:00 | 00:05:00 | 0 days | . 2 | 2018-10-04 15:15:32.000 | 2018-10-04 15:16:00 | 2018-10-04 16:05:08.430 | 2018-10-04 16:20:08.560 | 서초구 | 서초4동 | 강남구 | 역삼1동 | 1500 | X | ... | 바로콜 | 00:00:28 | 00:49:08.430000 | 00:49:36.430000 | 01:04:36.560000 | 01:04:08.560000 | 00:15:00.130000 | 00:01:00 | 00:05:00 | 0 days | . 3 rows × 21 columns . data2 =data[data[&#39;예정-접수&#39;]&gt;data[&#39;0분&#39;]].copy() . data2.head(3) . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 접수방법 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 1분 5분 0분 . 0 | 2018-10-04 15:08:20.330 | 2018-10-05 07:00:00 | 2018-10-05 07:04:49.537 | 2018-10-05 07:27:37.020 | 노원구 | 중계본동 | 영등포구 | 영등포동 | 4100 | ○ | ... | 바로콜 | 15:51:39.670000 | 00:04:49.537000 | 15:56:29.207000 | 16:19:16.690000 | 00:27:37.020000 | 00:22:47.483000 | 00:01:00 | 00:05:00 | 0 days | . 1 | 2018-10-04 15:14:30.000 | 2018-10-04 15:15:00 | 2018-10-04 16:11:52.473 | 2018-10-04 16:22:43.110 | 중구 | 신당제5동 | 중구 | 중림동 | 1700 | X | ... | 바로콜 | 00:00:30 | 00:56:52.473000 | 00:57:22.473000 | 01:08:13.110000 | 01:07:43.110000 | 00:10:50.637000 | 00:01:00 | 00:05:00 | 0 days | . 2 | 2018-10-04 15:15:32.000 | 2018-10-04 15:16:00 | 2018-10-04 16:05:08.430 | 2018-10-04 16:20:08.560 | 서초구 | 서초4동 | 강남구 | 역삼1동 | 1500 | X | ... | 바로콜 | 00:00:28 | 00:49:08.430000 | 00:49:36.430000 | 01:04:36.560000 | 01:04:08.560000 | 00:15:00.130000 | 00:01:00 | 00:05:00 | 0 days | . 3 rows × 21 columns . data2.reset_index(drop=True,inplace=True) . data2[&#39;예정-접수&#39;] = data2[&#39;예정일시&#39;] - data2[&#39;접수일시&#39;] #### 예약 전화 거르기위한 열 data2[&#39;배차-예정&#39;] = data2[&#39;배차일시&#39;] - data2[&#39;예정일시&#39;] data2[&#39;배차-접수&#39;] = data2[&#39;배차일시&#39;] - data2[&#39;접수일시&#39;] data2[&#39;승차-접수&#39;] = data2[&#39;승차일시&#39;] - data2[&#39;접수일시&#39;] #### 대기 시간 data2[&#39;승차-예정&#39;] = data2[&#39;승차일시&#39;] - data2[&#39;예정일시&#39;] data2[&#39;승차-배차&#39;] = data2[&#39;승차일시&#39;] - data2[&#39;배차일시&#39;] . data2.head(3) . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 접수방법 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 1분 5분 0분 . 0 | 2018-10-04 15:08:20.330 | 2018-10-05 07:00:00 | 2018-10-05 07:04:49.537 | 2018-10-05 07:27:37.020 | 노원구 | 중계본동 | 영등포구 | 영등포동 | 4100 | ○ | ... | 바로콜 | 15:51:39.670000 | 00:04:49.537000 | 15:56:29.207000 | 16:19:16.690000 | 00:27:37.020000 | 00:22:47.483000 | 00:01:00 | 00:05:00 | 0 days | . 1 | 2018-10-04 15:14:30.000 | 2018-10-04 15:15:00 | 2018-10-04 16:11:52.473 | 2018-10-04 16:22:43.110 | 중구 | 신당제5동 | 중구 | 중림동 | 1700 | X | ... | 바로콜 | 00:00:30 | 00:56:52.473000 | 00:57:22.473000 | 01:08:13.110000 | 01:07:43.110000 | 00:10:50.637000 | 00:01:00 | 00:05:00 | 0 days | . 2 | 2018-10-04 15:15:32.000 | 2018-10-04 15:16:00 | 2018-10-04 16:05:08.430 | 2018-10-04 16:20:08.560 | 서초구 | 서초4동 | 강남구 | 역삼1동 | 1500 | X | ... | 바로콜 | 00:00:28 | 00:49:08.430000 | 00:49:36.430000 | 01:04:36.560000 | 01:04:08.560000 | 00:15:00.130000 | 00:01:00 | 00:05:00 | 0 days | . 3 rows × 21 columns . data2 = data2[data2[&#39;배차-예정&#39;]&gt;data2[&#39;0분&#39;]] . data2[&#39;대기시간m&#39;] = data2[&#39;승차-예정&#39;].dt.total_seconds()/60 . data2 = data2.sort_values(by=&#39;대기시간m&#39;).reset_index(drop=True) . data2.head(3) . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 1분 5분 0분 대기시간m . 0 | 2019-01-04 16:25:15 | 2019-01-04 16:26:00 | 2019-01-04 16:26:01.387 | 2019-01-04 16:26:07.347 | 강동구 | 고덕제1동 | 하남시 | 풍산동 | 1700 | X | ... | 00:00:45 | 00:00:01.387000 | 00:00:46.387000 | 00:00:52.347000 | 00:00:07.347000 | 00:00:05.960000 | 00:01:00 | 00:05:00 | 0 days | 0.122450 | . 1 | 2018-12-18 10:30:57 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 00:01:03 | 00:00:00.687000 | 00:01:03.687000 | 00:01:12.730000 | 00:00:09.730000 | 00:00:09.043000 | 00:01:00 | 00:05:00 | 0 days | 0.162167 | . 2 | 2018-12-28 21:17:06 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 00:42:54 | 00:00:07.027000 | 00:43:01.027000 | 00:43:04.047000 | 00:00:10.047000 | 00:00:03.020000 | 00:01:00 | 00:05:00 | 0 days | 0.167450 | . 3 rows × 22 columns . data2.to_csv(&#39;콜택시1년현황_전처리_대기시간.csv&#39;) . &#50668;&#44592;&#48512;&#53552; &#54616;&#47732;&#45840; . import matplotlib as mpl import matplotlib.pyplot as plt import seaborn as sns import pandas as pd import numpy as np import requests import time plt.rcParams[&#39;font.family&#39;] = &#39;NanumGothic&#39; plt.rcParams[&#39;font.family&#39;] = &#39;Malgun Gothic&#39; . call=pd.read_csv(&#39;콜택시1년현황_전처리_대기시간.csv&#39;,index_col=0,encoding=&#39;utf-8&#39;) . call.head(3) . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 1분 5분 0분 대기시간m . 0 | 2019-01-04 16:25:15.000 | 2019-01-04 16:26:00.000 | 2019-01-04 16:26:01.387 | 2019-01-04 16:26:07.347 | 강동구 | 고덕제1동 | 하남시 | 풍산동 | 1700 | X | ... | 0 days 00:00:45.000000000 | 0 days 00:00:01.387000000 | 0 days 00:00:46.387000000 | 0 days 00:00:52.347000000 | 0 days 00:00:07.347000000 | 0 days 00:00:05.960000000 | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.122450 | . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00.000 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:03.000000000 | 0 days 00:00:00.687000000 | 0 days 00:01:03.687000000 | 0 days 00:01:12.730000000 | 0 days 00:00:09.730000000 | 0 days 00:00:09.043000000 | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00.000 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:42:54.000000000 | 0 days 00:00:07.027000000 | 0 days 00:43:01.027000000 | 0 days 00:43:04.047000000 | 0 days 00:00:10.047000000 | 0 days 00:00:03.020000000 | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | . 3 rows × 22 columns . call.dtypes . 접수일시 object 예정일시 object 배차일시 object 승차일시 object 출발(구) object 출발(동) object 도착(구) object 도착(동) object 요금(원) int64 휠체어이용여부 object 장애등급명 object 접수방법 object 예정-접수 object 배차-예정 object 배차-접수 object 승차-접수 object 승차-예정 object 승차-배차 object 1분 object 5분 object 0분 object 대기시간m float64 dtype: object . call[&#39;접수일시&#39;]=pd.to_datetime(call[&#39;접수일시&#39;],format=&#39;%Y-%m-%d %H:%M:%S.%f&#39;) call[&#39;예정일시&#39;]=pd.to_datetime(call[&#39;예정일시&#39;],format=&#39;%Y-%m-%d %H:%M:%S.%f&#39;) call[&#39;배차일시&#39;]=pd.to_datetime(call[&#39;배차일시&#39;],format=&#39;%Y-%m-%d %H:%M:%S.%f&#39;) call[&#39;승차일시&#39;]=pd.to_datetime(call[&#39;승차일시&#39;],format=&#39;%Y-%m-%d %H:%M:%S.%f&#39;) . call[&#39;예정-접수&#39;]=pd.to_timedelta(call[&#39;예정-접수&#39;]) . call.dtypes . 접수일시 datetime64[ns] 예정일시 datetime64[ns] 배차일시 datetime64[ns] 승차일시 datetime64[ns] 출발(구) object 출발(동) object 도착(구) object 도착(동) object 요금(원) int64 휠체어이용여부 object 장애등급명 object 접수방법 object 예정-접수 timedelta64[ns] 배차-예정 object 배차-접수 object 승차-접수 object 승차-예정 object 승차-배차 object 1분 object 5분 object 0분 object 대기시간m float64 dtype: object . call[&#39;배차-예정&#39;]=pd.to_timedelta(call[&#39;배차-예정&#39;]) call[&#39;배차-접수&#39;]=pd.to_timedelta(call[&#39;배차-접수&#39;]) call[&#39;승차-접수&#39;]=pd.to_timedelta(call[&#39;승차-접수&#39;]) call[&#39;승차-예정&#39;]=pd.to_timedelta(call[&#39;승차-예정&#39;]) call[&#39;승차-배차&#39;]=pd.to_timedelta(call[&#39;승차-배차&#39;]) . call.dtypes . 접수일시 datetime64[ns] 예정일시 datetime64[ns] 배차일시 datetime64[ns] 승차일시 datetime64[ns] 출발(구) object 출발(동) object 도착(구) object 도착(동) object 요금(원) int64 휠체어이용여부 object 장애등급명 object 접수방법 object 예정-접수 timedelta64[ns] 배차-예정 timedelta64[ns] 배차-접수 timedelta64[ns] 승차-접수 timedelta64[ns] 승차-예정 timedelta64[ns] 승차-배차 timedelta64[ns] 1분 object 5분 object 0분 object 대기시간m float64 dtype: object . call[&#39;예-접&#39;]=call[:742679][&#39;예정-접수&#39;] / np.timedelta64(1, &#39;s&#39;) call[&#39;배-예&#39;]=call[:742679][&#39;배차-예정&#39;] / np.timedelta64(1, &#39;s&#39;) call[&#39;배-접&#39;]=call[:742679][&#39;배차-접수&#39;] / np.timedelta64(1, &#39;s&#39;) call[&#39;승-접&#39;]=call[:742679][&#39;승차-접수&#39;] / np.timedelta64(1, &#39;s&#39;) call[&#39;승-예&#39;]=call[:742679][&#39;승차-예정&#39;] / np.timedelta64(1, &#39;s&#39;) call[&#39;승-배&#39;]=call[:742679][&#39;승차-배차&#39;] / np.timedelta64(1, &#39;s&#39;) . call . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 0 | 2019-01-04 16:25:15.000 | 2019-01-04 16:26:00 | 2019-01-04 16:26:01.387 | 2019-01-04 16:26:07.347 | 강동구 | 고덕제1동 | 하남시 | 풍산동 | 1700 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.122450 | 45.000 | 1.387 | 46.387 | 52.347 | 7.347 | 5.960 | . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 3 | 2018-12-17 14:35:45.000 | 2018-12-17 14:36:00 | 2018-12-17 14:36:05.180 | 2018-12-17 14:36:11.217 | 용인시기흥구 | 동백동 | 종로구 | 종로1.2.3.4가동 | 5200 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.186950 | 15.000 | 5.180 | 20.180 | 26.217 | 11.217 | 6.037 | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 742674 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 376.945667 | 2.080 | 20864.497 | 20866.577 | 22618.820 | 22616.740 | 1752.243 | . 742675 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.189050 | 10.000 | 21191.237 | 21201.237 | 22641.343 | 22631.343 | 1440.106 | . 742676 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.931550 | 25.433 | 21700.793 | 21726.226 | 22701.326 | 22675.893 | 975.100 | . 742677 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 394.105283 | 24.183 | 21720.020 | 21744.203 | 23670.500 | 23646.317 | 1926.297 | . 742678 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 415.953117 | 34.000 | 21962.890 | 21996.890 | 24991.187 | 24957.187 | 2994.297 | . 742679 rows × 28 columns . call.dtypes . 접수일시 datetime64[ns] 예정일시 datetime64[ns] 배차일시 datetime64[ns] 승차일시 datetime64[ns] 출발(구) object 출발(동) object 도착(구) object 도착(동) object 요금(원) int64 휠체어이용여부 object 장애등급명 object 접수방법 object 예정-접수 timedelta64[ns] 배차-예정 timedelta64[ns] 배차-접수 timedelta64[ns] 승차-접수 timedelta64[ns] 승차-예정 timedelta64[ns] 승차-배차 timedelta64[ns] 1분 object 5분 object 0분 object 대기시간m float64 예-접 float64 배-예 float64 배-접 float64 승-접 float64 승-예 float64 승-배 float64 dtype: object . &#52636;&#48156; &#44396; &#44592;&#51456;&#51004;&#47196; &#45936;&#51060;&#53552; &#51221;&#47532; . #### 서울만 골라내기 (이미 전처리 한 데이터라 변화 없음) gu_list_kr =[&#39;강남구&#39;,&#39;강동구&#39;,&#39;강북구&#39;,&#39;강서구&#39;,&#39;관악구&#39;,&#39;광진구&#39;,&#39;구로구&#39;,&#39;금천구&#39;,&#39;노원구&#39;,&#39;도봉구&#39;,&#39;동대문구&#39;,&#39;동작구&#39;,&#39;마포구&#39;,&#39;서대문구&#39;,&#39;서초구&#39;,&#39;성동구&#39;,&#39;성북구&#39;,&#39;송파구&#39;,&#39;양천구&#39;,&#39;영등포구&#39;,&#39;용산구&#39;,&#39;은평구&#39;,&#39;종로구&#39;,&#39;중구&#39;,&#39;중랑구&#39;] depart_gu = call[call[&#39;출발(구)&#39;].isin(gu_list_kr)] . depart_gu . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 0 | 2019-01-04 16:25:15.000 | 2019-01-04 16:26:00 | 2019-01-04 16:26:01.387 | 2019-01-04 16:26:07.347 | 강동구 | 고덕제1동 | 하남시 | 풍산동 | 1700 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.122450 | 45.000 | 1.387 | 46.387 | 52.347 | 7.347 | 5.960 | . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . 5 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.213950 | 49.000 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 742674 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 376.945667 | 2.080 | 20864.497 | 20866.577 | 22618.820 | 22616.740 | 1752.243 | . 742675 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.189050 | 10.000 | 21191.237 | 21201.237 | 22641.343 | 22631.343 | 1440.106 | . 742676 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.931550 | 25.433 | 21700.793 | 21726.226 | 22701.326 | 22675.893 | 975.100 | . 742677 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 394.105283 | 24.183 | 21720.020 | 21744.203 | 23670.500 | 23646.317 | 1926.297 | . 742678 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 415.953117 | 34.000 | 21962.890 | 21996.890 | 24991.187 | 24957.187 | 2994.297 | . 741892 rows × 28 columns . depart_gu=depart_gu.groupby(by=&#39;출발(구)&#39;).mean() . depart_gu . 요금(원) 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 출발(구) . 강남구 | 2625.861691 | 60.028097 | 4081.347346 | 2354.388396 | 6435.735742 | 7683.033184 | 3601.685838 | 1247.297441 | . 강동구 | 2432.222920 | 58.287215 | 2398.753975 | 2461.831960 | 4860.585935 | 5895.986904 | 3497.232930 | 1035.400970 | . 강북구 | 2089.808088 | 62.518349 | 3193.004634 | 2661.318627 | 5854.323262 | 6944.105565 | 3751.100931 | 1089.782304 | . 강서구 | 2546.160102 | 63.186408 | 6522.030563 | 2611.100718 | 9133.131281 | 10313.215015 | 3791.184452 | 1180.083734 | . 관악구 | 2144.614242 | 66.867599 | 5774.380606 | 2730.138347 | 8504.518953 | 9786.436563 | 4012.055957 | 1281.917610 | . 광진구 | 2374.588812 | 60.804197 | 1964.284936 | 2543.079169 | 4507.364105 | 5612.536776 | 3648.251840 | 1105.172671 | . 구로구 | 2355.148145 | 63.754117 | 8080.513724 | 2594.455807 | 10674.969531 | 11905.760748 | 3825.247023 | 1230.791217 | . 금천구 | 2273.988169 | 68.828005 | 10108.114185 | 2835.619502 | 12943.733687 | 14237.794506 | 4129.680321 | 1294.060819 | . 노원구 | 2117.297636 | 58.976501 | 4143.795980 | 2508.170722 | 6651.966702 | 7682.386070 | 3538.590090 | 1030.419368 | . 도봉구 | 2204.408442 | 59.124870 | 5308.299434 | 2474.950326 | 7783.249760 | 8855.791623 | 3547.492189 | 1072.541863 | . 동대문구 | 2250.582625 | 58.871972 | 2905.065567 | 2396.791438 | 5301.857005 | 6437.383904 | 3532.318338 | 1135.526899 | . 동작구 | 2256.360409 | 66.997995 | 5812.131464 | 2765.976316 | 8578.107780 | 9832.011167 | 4019.879703 | 1253.903388 | . 마포구 | 2299.562720 | 68.577892 | 3030.048326 | 2945.498415 | 5975.546741 | 7144.721831 | 4114.673505 | 1169.175091 | . 서대문구 | 2297.993266 | 66.830732 | 1268.185940 | 2844.823232 | 4113.009172 | 5278.029832 | 4009.843891 | 1165.020660 | . 서초구 | 2584.279841 | 66.045897 | 5258.696104 | 2689.590127 | 7948.286231 | 9221.449922 | 3962.753817 | 1273.163691 | . 성동구 | 2466.465103 | 63.033963 | 1922.795545 | 2586.942327 | 4509.737873 | 5704.833350 | 3782.037804 | 1195.095477 | . 성북구 | 2104.051240 | 63.226386 | 3067.398732 | 2588.291261 | 5655.689994 | 6860.981871 | 3793.583139 | 1205.291878 | . 송파구 | 2432.063906 | 59.656376 | 4204.182937 | 2400.367333 | 6604.550270 | 7783.565471 | 3579.382534 | 1179.015201 | . 양천구 | 2149.970686 | 62.891541 | 5972.958258 | 2594.017891 | 8566.976149 | 9746.450729 | 3773.492471 | 1179.474580 | . 영등포구 | 2327.780199 | 62.955031 | 3131.064958 | 2573.281039 | 5704.345997 | 6908.366847 | 3777.301889 | 1204.020850 | . 용산구 | 2587.256864 | 67.023946 | 4210.251914 | 2669.947446 | 6880.199360 | 8231.688672 | 4021.436758 | 1351.489312 | . 은평구 | 2334.945130 | 62.825972 | 3417.205898 | 2709.391599 | 6126.597496 | 7186.764218 | 3769.558321 | 1060.166722 | . 종로구 | 2579.056419 | 67.572822 | 445.497770 | 2782.942507 | 3228.440277 | 4499.867101 | 4054.369332 | 1271.426825 | . 중구 | 2514.563595 | 68.002307 | 2277.292407 | 2735.014787 | 5012.307194 | 6357.430848 | 4080.138441 | 1345.123654 | . 중랑구 | 2336.561279 | 56.868429 | 7106.766578 | 2337.784794 | 9444.551372 | 10518.872315 | 3412.105737 | 1074.320943 | . depart_gu.corr() . 요금(원) 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 요금(원) | 1.000000 | 0.144984 | -0.168893 | -0.053201 | -0.172845 | -0.153744 | 0.144984 | 0.429739 | . 대기시간m | 0.144984 | 1.000000 | 0.031678 | 0.922393 | 0.097254 | 0.127064 | 1.000000 | 0.747790 | . 예-접 | -0.168893 | 0.031678 | 1.000000 | -0.049722 | 0.997478 | 0.995422 | 0.031678 | 0.159381 | . 배-예 | -0.053201 | 0.922393 | -0.049722 | 1.000000 | 0.021287 | 0.038863 | 0.922393 | 0.433308 | . 배-접 | -0.172845 | 0.097254 | 0.997478 | 0.021287 | 1.000000 | 0.999190 | 0.097254 | 0.190333 | . 승-접 | -0.153744 | 0.127064 | 0.995422 | 0.038863 | 0.999190 | 1.000000 | 0.127064 | 0.229678 | . 승-예 | 0.144984 | 1.000000 | 0.031678 | 0.922393 | 0.097254 | 0.127064 | 1.000000 | 0.747790 | . 승-배 | 0.429739 | 0.747790 | 0.159381 | 0.433308 | 0.190333 | 0.229678 | 0.747790 | 1.000000 | . plt.figure(figsize=(15,15)) sns.heatmap(data = depart_gu.corr(), annot=True, fmt = &#39;.2f&#39;, linewidths=.5, cmap=&#39;Blues&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1e6963160c8&gt; . from sklearn.linear_model import LinearRegression X = gu_data[&#39;출발구&#39;].values.reshape(-1, 1) Y = gu_data[&#39;대기시간m&#39;].values.reshape(-1, 1) linear_regressor = LinearRegression() # create object for the class linear_regressor.fit(X, Y) # perform linear regression Y_pred = linear_regressor.predict(X) # make predictions plt.scatter(X, Y) plt.plot(X, Y_pred, color=&#39;red&#39;) plt.show() . X = gu_data[&#39;요금(원)&#39;].values.reshape(-1, 1) Y = gu_data[&#39;대기시간m&#39;].values.reshape(-1, 1) linear_regressor = LinearRegression() # create object for the class linear_regressor.fit(X, Y) # perform linear regression Y_pred = linear_regressor.predict(X) # make predictions plt.scatter(X, Y) plt.plot(X, Y_pred, color=&#39;red&#39;) plt.show() . &#52636;&#48156;&#44396;-&#46020;&#52265;&#44396;(&#49436;&#50872;&#49884; &#44592;&#51456;&#51004;&#47196; &#51221;&#47532;&#54620; &#45936;&#51060;&#53552; &#48977;&#44592;) - &#51060;&#54980; &#46160; &#48320;&#49688;&#44036;&#51032; &#49345;&#44288;&#44288;&#44228;&#47484; &#48372;&#44592; . #출발구-도착구 서울시 내로만 정리 . gu_list_kr =[&#39;강남구&#39;,&#39;강동구&#39;,&#39;강북구&#39;,&#39;강서구&#39;,&#39;관악구&#39;,&#39;광진구&#39;,&#39;구로구&#39;,&#39;금천구&#39;,&#39;노원구&#39;,&#39;도봉구&#39;,&#39;동대문구&#39;,&#39;동작구&#39;,&#39;마포구&#39;,&#39;서대문구&#39;,&#39;서초구&#39;,&#39;성동구&#39;,&#39;성북구&#39;,&#39;송파구&#39;,&#39;양천구&#39;,&#39;영등포구&#39;,&#39;용산구&#39;,&#39;은평구&#39;,&#39;종로구&#39;,&#39;중구&#39;,&#39;중랑구&#39;] gu_data = call[ call[&#39;출발(구)&#39;].isin(gu_list_kr)&amp; call[&#39;도착(구)&#39;].isin(gu_list_kr) ] ### &amp; = and | =or . gu_data . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . 5 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.213950 | 49.000 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | . 6 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.218833 | 31.000 | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 742674 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 376.945667 | 2.080 | 20864.497 | 20866.577 | 22618.820 | 22616.740 | 1752.243 | . 742675 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.189050 | 10.000 | 21191.237 | 21201.237 | 22641.343 | 22631.343 | 1440.106 | . 742676 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.931550 | 25.433 | 21700.793 | 21726.226 | 22701.326 | 22675.893 | 975.100 | . 742677 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 394.105283 | 24.183 | 21720.020 | 21744.203 | 23670.500 | 23646.317 | 1926.297 | . 742678 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 415.953117 | 34.000 | 21962.890 | 21996.890 | 24991.187 | 24957.187 | 2994.297 | . 694182 rows × 28 columns . #각 구 명 고유번호를 지정하여 데이터 정제 . gu_data.columns . Index([&#39;접수일시&#39;, &#39;예정일시&#39;, &#39;배차일시&#39;, &#39;승차일시&#39;, &#39;출발(구)&#39;, &#39;출발(동)&#39;, &#39;도착(구)&#39;, &#39;도착(동)&#39;, &#39;요금(원)&#39;, &#39;휠체어이용여부&#39;, &#39;장애등급명&#39;, &#39;접수방법&#39;, &#39;예정-접수&#39;, &#39;배차-예정&#39;, &#39;배차-접수&#39;, &#39;승차-접수&#39;, &#39;승차-예정&#39;, &#39;승차-배차&#39;, &#39;1분&#39;, &#39;5분&#39;, &#39;0분&#39;, &#39;대기시간m&#39;, &#39;예-접&#39;, &#39;배-예&#39;, &#39;배-접&#39;, &#39;승-접&#39;, &#39;승-예&#39;, &#39;승-배&#39;], dtype=&#39;object&#39;) . gu_data = gu_data.rename(columns={&#39;출발(구)&#39;: &#39;출발구&#39;, &#39;도착(구)&#39;: &#39;도착구&#39;,&#39;출발(동)&#39;: &#39;출발동&#39;, &#39;도착(동)&#39;: &#39;도착동&#39;}) . #이후에 구데이터 수치로 정제한 프레임 말고 다시 이용할 때 대비 gu_data1=gu_data.copy() . gu_data.loc[gu_data.출발구==&#39;강남구&#39;, &#39;출발구&#39;] = 1 . gu_data . 접수일시 예정일시 배차일시 승차일시 출발구 출발동 도착구 도착동 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . 5 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.213950 | 49.000 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | . 6 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.218833 | 31.000 | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 742674 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 376.945667 | 2.080 | 20864.497 | 20866.577 | 22618.820 | 22616.740 | 1752.243 | . 742675 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 1 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.189050 | 10.000 | 21191.237 | 21201.237 | 22641.343 | 22631.343 | 1440.106 | . 742676 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.931550 | 25.433 | 21700.793 | 21726.226 | 22701.326 | 22675.893 | 975.100 | . 742677 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 394.105283 | 24.183 | 21720.020 | 21744.203 | 23670.500 | 23646.317 | 1926.297 | . 742678 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 415.953117 | 34.000 | 21962.890 | 21996.890 | 24991.187 | 24957.187 | 2994.297 | . 694182 rows × 28 columns . gu_data.loc[gu_data.출발구==&#39;강동구&#39;, &#39;출발구&#39;] = 2 gu_data.loc[gu_data.출발구==&#39;강북구&#39;, &#39;출발구&#39;] = 3 gu_data.loc[gu_data.출발구==&#39;강서구&#39;, &#39;출발구&#39;] = 4 gu_data.loc[gu_data.출발구==&#39;관악구&#39;, &#39;출발구&#39;] = 5 gu_data.loc[gu_data.출발구==&#39;광진구&#39;, &#39;출발구&#39;] = 6 gu_data.loc[gu_data.출발구==&#39;구로구&#39;, &#39;출발구&#39;] = 7 gu_data.loc[gu_data.출발구==&#39;금천구&#39;, &#39;출발구&#39;] = 8 gu_data.loc[gu_data.출발구==&#39;노원구&#39;, &#39;출발구&#39;] = 9 gu_data.loc[gu_data.출발구==&#39;도봉구&#39;, &#39;출발구&#39;] = 10 gu_data.loc[gu_data.출발구==&#39;동대문구&#39;, &#39;출발구&#39;] = 11 gu_data.loc[gu_data.출발구==&#39;동작구&#39;, &#39;출발구&#39;] = 12 gu_data.loc[gu_data.출발구==&#39;마포구&#39;, &#39;출발구&#39;] = 13 gu_data.loc[gu_data.출발구==&#39;서대문구&#39;, &#39;출발구&#39;] = 14 gu_data.loc[gu_data.출발구==&#39;서초구&#39;, &#39;출발구&#39;] = 15 gu_data.loc[gu_data.출발구==&#39;성동구&#39;, &#39;출발구&#39;] = 16 gu_data.loc[gu_data.출발구==&#39;성북구&#39;, &#39;출발구&#39;] = 17 gu_data.loc[gu_data.출발구==&#39;송파구&#39;, &#39;출발구&#39;] = 18 gu_data.loc[gu_data.출발구==&#39;양천구&#39;, &#39;출발구&#39;] = 19 gu_data.loc[gu_data.출발구==&#39;영등포구&#39;, &#39;출발구&#39;] = 20 gu_data.loc[gu_data.출발구==&#39;용산구&#39;, &#39;출발구&#39;] = 21 gu_data.loc[gu_data.출발구==&#39;은평구&#39;, &#39;출발구&#39;] = 22 gu_data.loc[gu_data.출발구==&#39;종로구&#39;, &#39;출발구&#39;] = 23 gu_data.loc[gu_data.출발구==&#39;중구&#39;, &#39;출발구&#39;] = 24 gu_data.loc[gu_data.출발구==&#39;중랑구&#39;, &#39;출발구&#39;] = 25 . gu_data.loc[gu_data.도착구==&#39;강남구&#39;, &#39;도착구&#39;] = 1 gu_data.loc[gu_data.도착구==&#39;강동구&#39;, &#39;도착구&#39;] = 2 gu_data.loc[gu_data.도착구==&#39;강북구&#39;, &#39;도착구&#39;] = 3 gu_data.loc[gu_data.도착구==&#39;강서구&#39;, &#39;도착구&#39;] = 4 gu_data.loc[gu_data.도착구==&#39;관악구&#39;, &#39;도착구&#39;] = 5 gu_data.loc[gu_data.도착구==&#39;광진구&#39;, &#39;도착구&#39;] = 6 gu_data.loc[gu_data.도착구==&#39;구로구&#39;, &#39;도착구&#39;] = 7 gu_data.loc[gu_data.도착구==&#39;금천구&#39;, &#39;도착구&#39;] = 8 gu_data.loc[gu_data.도착구==&#39;노원구&#39;, &#39;도착구&#39;] = 9 gu_data.loc[gu_data.도착구==&#39;도봉구&#39;, &#39;도착구&#39;] = 10 gu_data.loc[gu_data.도착구==&#39;동대문구&#39;, &#39;도착구&#39;] = 11 gu_data.loc[gu_data.도착구==&#39;동작구&#39;, &#39;도착구&#39;] = 12 gu_data.loc[gu_data.도착구==&#39;마포구&#39;, &#39;도착구&#39;] = 13 gu_data.loc[gu_data.도착구==&#39;서대문구&#39;, &#39;도착구&#39;] = 14 gu_data.loc[gu_data.도착구==&#39;서초구&#39;, &#39;도착구&#39;] = 15 gu_data.loc[gu_data.도착구==&#39;성동구&#39;, &#39;도착구&#39;] = 16 gu_data.loc[gu_data.도착구==&#39;성북구&#39;, &#39;도착구&#39;] = 17 gu_data.loc[gu_data.도착구==&#39;송파구&#39;, &#39;도착구&#39;] = 18 gu_data.loc[gu_data.도착구==&#39;양천구&#39;, &#39;도착구&#39;] = 19 gu_data.loc[gu_data.도착구==&#39;영등포구&#39;, &#39;도착구&#39;] = 20 gu_data.loc[gu_data.도착구==&#39;용산구&#39;, &#39;도착구&#39;] = 21 gu_data.loc[gu_data.도착구==&#39;은평구&#39;, &#39;도착구&#39;] = 22 gu_data.loc[gu_data.도착구==&#39;종로구&#39;, &#39;도착구&#39;] = 23 gu_data.loc[gu_data.도착구==&#39;중구&#39;, &#39;도착구&#39;] = 24 gu_data.loc[gu_data.도착구==&#39;중랑구&#39;, &#39;도착구&#39;] = 25 . gu_data . 접수일시 예정일시 배차일시 승차일시 출발구 출발(동) 도착구 도착(동) 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 11 | 제기제2동 | 9 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 6 | 자양제2동 | 11 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 10 | 창제5동 | 3 | 번제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . 5 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 11 | 신설동 | 21 | 남영동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.213950 | 49.000 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | . 6 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 7 | 고척제2동 | 19 | 신정6동 | 1500 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.218833 | 31.000 | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 742674 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 5 | 조원동 | 10 | 방학제2동 | 4900 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 376.945667 | 2.080 | 20864.497 | 20866.577 | 22618.820 | 22616.740 | 1752.243 | . 742675 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 1 | 역삼1동 | 3 | 삼양동 | 3600 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.189050 | 10.000 | 21191.237 | 21201.237 | 22641.343 | 22631.343 | 1440.106 | . 742676 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 20 | 영등포동 | 3 | 번제2동 | 4000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.931550 | 25.433 | 21700.793 | 21726.226 | 22701.326 | 22675.893 | 975.100 | . 742677 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 12 | 신대방제2동 | 9 | 월계2동 | 4300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 394.105283 | 24.183 | 21720.020 | 21744.203 | 23670.500 | 23646.317 | 1926.297 | . 742678 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 25 | 망우본동 | 4 | 화곡제4동 | 4500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 415.953117 | 34.000 | 21962.890 | 21996.890 | 24991.187 | 24957.187 | 2994.297 | . 694182 rows × 28 columns . #두가지 변수의 상관계수를 보기 . gu_data.corr() . 출발구 도착구 요금(원) 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 출발구 | 1.000000 | 0.258352 | 0.008400 | 0.014623 | -0.013106 | 0.008360 | -0.012400 | -0.011571 | 0.014623 | 0.028567 | . 도착구 | 0.258352 | 1.000000 | 0.020707 | -0.000455 | 0.002897 | -0.003629 | 0.002527 | 0.002903 | -0.000455 | 0.013293 | . 요금(원) | 0.008400 | 0.020707 | 1.000000 | 0.086935 | 0.059399 | 0.066455 | 0.068747 | 0.071502 | 0.086935 | 0.099294 | . 대기시간m | 0.014623 | -0.000455 | 0.086935 | 1.000000 | -0.233192 | 0.973378 | -0.121458 | -0.113829 | 1.000000 | 0.262516 | . 예-접 | -0.013106 | 0.002897 | 0.059399 | -0.233192 | 1.000000 | -0.246493 | 0.993185 | 0.992654 | -0.233192 | 0.020913 | . 배-예 | 0.008360 | -0.003629 | 0.066455 | 0.973378 | -0.246493 | 1.000000 | -0.131861 | -0.130730 | 0.973378 | 0.034360 | . 배-접 | -0.012400 | 0.002527 | 0.068747 | -0.121458 | 0.993185 | -0.131861 | 1.000000 | 0.999593 | -0.121458 | 0.025523 | . 승-접 | -0.011571 | 0.002903 | 0.071502 | -0.113829 | 0.992654 | -0.130730 | 0.999593 | 1.000000 | -0.113829 | 0.054028 | . 승-예 | 0.014623 | -0.000455 | 0.086935 | 1.000000 | -0.233192 | 0.973378 | -0.121458 | -0.113829 | 1.000000 | 0.262516 | . 승-배 | 0.028567 | 0.013293 | 0.099294 | 0.262516 | 0.020913 | 0.034360 | 0.025523 | 0.054028 | 0.262516 | 1.000000 | . from sklearn.linear_model import LinearRegression . X = gu_data[&#39;출발구&#39;].values.reshape(-1, 1) Y = gu_data[&#39;도착구&#39;].values.reshape(-1, 1) linear_regressor = LinearRegression() # create object for the class linear_regressor.fit(X, Y) # perform linear regression Y_pred = linear_regressor.predict(X) # make predictions plt.scatter(X, Y) plt.plot(X, Y_pred, color=&#39;red&#39;) plt.show() . &#44396;,&#46041; &#44592;&#51456; &#45936;&#51060;&#53552; &#48516;&#49437; . #출발이 많은 지역 gu_data1[&#39;출발동&#39;].value_counts().head(10) . 하계1동 14905 상계6.7동 12448 신촌동 11892 성산제2동 10327 역촌동 9687 인수동 9021 연희동 7516 신내1동 7417 신대방제2동 7404 등촌제3동 6989 Name: 출발동, dtype: int64 . #출발이 많은 지역 gu_data1[&#39;도착동&#39;].value_counts().head(10) . 상계6.7동 13465 신촌동 13368 하계1동 13073 인수동 9638 역촌동 9627 성산제2동 8820 여의동 7953 신내1동 7462 신대방제2동 7450 이화동 7084 Name: 도착동, dtype: int64 . fff=gu_data1[&#39;출발동&#39;].value_counts() fff . 하계1동 14905 상계6.7동 12448 신촌동 11892 성산제2동 10327 역촌동 9687 ... 창신제3동 110 이태원제2동 71 둔촌제1동 53 반포본동 48 영종동 1 Name: 출발동, Length: 432, dtype: int64 . ggg=gu_data1[&#39;도착동&#39;].value_counts() ggg . 상계6.7동 13465 신촌동 13368 하계1동 13073 인수동 9638 역촌동 9627 ... 숭인제1동 116 둔촌제1동 51 반포본동 46 신흥동 4 수유3동 1 Name: 도착동, Length: 434, dtype: int64 . &#50836;&#44552;&#51004;&#47196; &#51060;&#46041;&#44144;&#47532;&#47484; &#52628;&#52636;&#54644;&#48372;&#47140; &#54664;&#51004;&#45208;, &#50836;&#44552;&#51060; &#50728;&#46972;&#51064; &#54856;&#54168;&#51060;&#51648; &#44592;&#51456;&#44284; &#45796;&#47476;&#47728;, . &#51060;&#50808;&#51032; &#44508;&#52825;&#51012; &#48156;&#44204;&#54616;&#51648; &#47803;&#54632; . def aaa(x): if x==1500: return 5 elif x==1800: return 6 elif x==2100: return 7 elif x==2400: return 8 elif x==2700: return 9 elif x==3000: return 10 elif x==3000+(35*a): return 10+a . &#49884;&#44228;&#50676;&#45936;&#51060;&#53552; . gu_data1.dtypes . 접수일시 datetime64[ns] 예정일시 datetime64[ns] 배차일시 datetime64[ns] 승차일시 datetime64[ns] 출발구 object 출발동 object 도착구 object 도착동 object 요금(원) int64 휠체어이용여부 object 장애등급명 object 접수방법 object 예정-접수 timedelta64[ns] 배차-예정 timedelta64[ns] 배차-접수 timedelta64[ns] 승차-접수 timedelta64[ns] 승차-예정 timedelta64[ns] 승차-배차 timedelta64[ns] 1분 object 5분 object 0분 object 대기시간m float64 예-접 float64 배-예 float64 배-접 float64 승-접 float64 승-예 float64 승-배 float64 이동거리km int64 dtype: object . gu_data1[&#39;접수년월일&#39;] = gu_data1[&#39;접수일시&#39;].dt.date gu_data1[&#39;접수년&#39;] =gu_data1[&#39;접수일시&#39;].dt.year gu_data1[&#39;접수월&#39;] = gu_data1[&#39;접수일시&#39;].dt.month gu_data1[&#39;접수일&#39;] = gu_data1[&#39;접수일시&#39;].dt.day gu_data1[&#39;접수시&#39;] = gu_data1[&#39;접수일시&#39;].dt.hour gu_data1[&#39;접수분&#39;] = gu_data1[&#39;접수일시&#39;].dt.minute gu_data1[&#39;접수요일&#39;] = gu_data1[&#39;접수일시&#39;].dt.dayofweek gu_data1.columns . Index([&#39;접수일시&#39;, &#39;예정일시&#39;, &#39;배차일시&#39;, &#39;승차일시&#39;, &#39;출발구&#39;, &#39;출발동&#39;, &#39;도착구&#39;, &#39;도착동&#39;, &#39;요금(원)&#39;, &#39;휠체어이용여부&#39;, &#39;장애등급명&#39;, &#39;접수방법&#39;, &#39;예정-접수&#39;, &#39;배차-예정&#39;, &#39;배차-접수&#39;, &#39;승차-접수&#39;, &#39;승차-예정&#39;, &#39;승차-배차&#39;, &#39;1분&#39;, &#39;5분&#39;, &#39;0분&#39;, &#39;대기시간m&#39;, &#39;예-접&#39;, &#39;배-예&#39;, &#39;배-접&#39;, &#39;승-접&#39;, &#39;승-예&#39;, &#39;승-배&#39;, &#39;이동거리km&#39;, &#39;접수년월일&#39;, &#39;접수년&#39;, &#39;접수월&#39;, &#39;접수일&#39;, &#39;접수시&#39;, &#39;접수분&#39;, &#39;접수요일&#39;], dtype=&#39;object&#39;) . #월.일.시간대별 구분을 해보기 위함임 #(그러나 접수/예정/배차/승차 모두 동일하게 이루어져 있어 이 4가지간의 #그래프는 현재는 필요없음(취소데이터가 있으면 가능) #접수 또는 예정을 기준으로, 월/일/시간/요일대별 그래프 표현 해보기) gu_data1[&#39;예정년월일&#39;] = gu_data1[&#39;예정일시&#39;].dt.date gu_data1[&#39;예정년&#39;] =gu_data1[&#39;예정일시&#39;].dt.year gu_data1[&#39;예정월&#39;] = gu_data1[&#39;예정일시&#39;].dt.month gu_data1[&#39;예정일&#39;] = gu_data1[&#39;예정일시&#39;].dt.day gu_data1[&#39;예정시&#39;] = gu_data1[&#39;예정일시&#39;].dt.hour gu_data1[&#39;예정분&#39;] = gu_data1[&#39;예정일시&#39;].dt.minute gu_data1[&#39;예정요일&#39;] = gu_data1[&#39;예정일시&#39;].dt.dayofweek gu_data1[&#39;배차년월일&#39;] = gu_data1[&#39;배차일시&#39;].dt.date gu_data1[&#39;배차년&#39;] =gu_data1[&#39;배차일시&#39;].dt.year gu_data1[&#39;배차월&#39;] = gu_data1[&#39;배차일시&#39;].dt.month gu_data1[&#39;배차일&#39;] = gu_data1[&#39;배차일시&#39;].dt.day gu_data1[&#39;배차시&#39;] = gu_data1[&#39;배차일시&#39;].dt.hour gu_data1[&#39;배차분&#39;] = gu_data1[&#39;배차일시&#39;].dt.minute gu_data1[&#39;배차요일&#39;] = gu_data1[&#39;배차일시&#39;].dt.dayofweek gu_data1[&#39;승차년월일&#39;] = gu_data1[&#39;승차일시&#39;].dt.date gu_data1[&#39;승차년&#39;] =gu_data1[&#39;승차일시&#39;].dt.year gu_data1[&#39;승차월&#39;] = gu_data1[&#39;승차일시&#39;].dt.month gu_data1[&#39;승차일&#39;] = gu_data1[&#39;승차일시&#39;].dt.day gu_data1[&#39;승차시&#39;] = gu_data1[&#39;승차일시&#39;].dt.hour gu_data1[&#39;승차분&#39;] = gu_data1[&#39;승차일시&#39;].dt.minute gu_data1[&#39;승차요일&#39;] = gu_data1[&#39;승차일시&#39;].dt.dayofweek gu_data1.columns . Index([&#39;접수일시&#39;, &#39;예정일시&#39;, &#39;배차일시&#39;, &#39;승차일시&#39;, &#39;출발구&#39;, &#39;출발동&#39;, &#39;도착구&#39;, &#39;도착동&#39;, &#39;요금(원)&#39;, &#39;휠체어이용여부&#39;, &#39;장애등급명&#39;, &#39;접수방법&#39;, &#39;예정-접수&#39;, &#39;배차-예정&#39;, &#39;배차-접수&#39;, &#39;승차-접수&#39;, &#39;승차-예정&#39;, &#39;승차-배차&#39;, &#39;1분&#39;, &#39;5분&#39;, &#39;0분&#39;, &#39;대기시간m&#39;, &#39;예-접&#39;, &#39;배-예&#39;, &#39;배-접&#39;, &#39;승-접&#39;, &#39;승-예&#39;, &#39;승-배&#39;, &#39;이동거리km&#39;, &#39;접수년월일&#39;, &#39;접수년&#39;, &#39;접수월&#39;, &#39;접수일&#39;, &#39;접수시&#39;, &#39;접수분&#39;, &#39;접수요일&#39;, &#39;예정년월일&#39;, &#39;예정년&#39;, &#39;예정월&#39;, &#39;예정일&#39;, &#39;예정시&#39;, &#39;예정분&#39;, &#39;예정요일&#39;, &#39;배차년월일&#39;, &#39;배차년&#39;, &#39;배차월&#39;, &#39;배차일&#39;, &#39;배차시&#39;, &#39;배차분&#39;, &#39;배차요일&#39;, &#39;승차년월일&#39;, &#39;승차년&#39;, &#39;승차월&#39;, &#39;승차일&#39;, &#39;승차시&#39;, &#39;승차분&#39;, &#39;승차요일&#39;], dtype=&#39;object&#39;) . data_month1 = gu_data1[&#39;접수월&#39;].value_counts().reset_index() data_month1.columns = [&#39;month&#39;, &#39;count&#39;] . data_month1 = data_month_1.sort_values(&#39;month&#39;) data_month1[&#39;확인&#39;] = &#39;접수&#39; data_month1 . month count 확인 . 8 | 1 | 51562 | 접수 | . 7 | 2 | 51655 | 접수 | . 5 | 3 | 61143 | 접수 | . 2 | 4 | 66540 | 접수 | . 3 | 5 | 65392 | 접수 | . 6 | 6 | 60769 | 접수 | . 0 | 7 | 69155 | 접수 | . 1 | 8 | 67503 | 접수 | . 4 | 9 | 61859 | 접수 | . 9 | 10 | 49391 | 접수 | . 10 | 11 | 47253 | 접수 | . 11 | 12 | 41960 | 접수 | . data_month2 = gu_data1[&#39;예정월&#39;].value_counts().reset_index() data_month2.columns = [&#39;month&#39;, &#39;count&#39;] data_month2 = data_month_1.sort_values(&#39;month&#39;) data_month2[&#39;확인&#39;] = &#39;예정&#39; data_month3 = gu_data1[&#39;배차월&#39;].value_counts().reset_index() data_month3.columns = [&#39;month&#39;, &#39;count&#39;] data_month3 = data_month_1.sort_values(&#39;month&#39;) data_month3[&#39;확인&#39;] = &#39;배차&#39; data_month4 = gu_data1[&#39;승차월&#39;].value_counts().reset_index() data_month4.columns = [&#39;month&#39;, &#39;count&#39;] data_month4 = data_month_1.sort_values(&#39;month&#39;) data_month4[&#39;확인&#39;] = &#39;승차&#39; . month count 확인 . 8 | 1 | 51562 | 승차 | . 7 | 2 | 51655 | 승차 | . 5 | 3 | 61143 | 승차 | . 2 | 4 | 66540 | 승차 | . 3 | 5 | 65392 | 승차 | . 6 | 6 | 60769 | 승차 | . 0 | 7 | 69155 | 승차 | . 1 | 8 | 67503 | 승차 | . 4 | 9 | 61859 | 승차 | . 9 | 10 | 49391 | 승차 | . 10 | 11 | 47253 | 승차 | . 11 | 12 | 41960 | 승차 | . data_month2 . month count 확인 . 8 | 1 | 51562 | 예정 | . 7 | 2 | 51655 | 예정 | . 5 | 3 | 61143 | 예정 | . 2 | 4 | 66540 | 예정 | . 3 | 5 | 65392 | 예정 | . 6 | 6 | 60769 | 예정 | . 0 | 7 | 69155 | 예정 | . 1 | 8 | 67503 | 예정 | . 4 | 9 | 61859 | 예정 | . 9 | 10 | 49391 | 예정 | . 10 | 11 | 47253 | 예정 | . 11 | 12 | 41960 | 예정 | . data_month = pd.concat([data_month1, data_month2,data_month3, data_month4]) data_month.head . &lt;bound method NDFrame.head of month count 확인 8 1 51562 접수 7 2 51655 접수 5 3 61143 접수 2 4 66540 접수 3 5 65392 접수 6 6 60769 접수 0 7 69155 접수 1 8 67503 접수 4 9 61859 접수 9 10 49391 접수 10 11 47253 접수 11 12 41960 접수 8 1 51562 예정 7 2 51655 예정 5 3 61143 예정 2 4 66540 예정 3 5 65392 예정 6 6 60769 예정 0 7 69155 예정 1 8 67503 예정 4 9 61859 예정 9 10 49391 예정 10 11 47253 예정 11 12 41960 예정 8 1 51562 배차 7 2 51655 배차 5 3 61143 배차 2 4 66540 배차 3 5 65392 배차 6 6 60769 배차 0 7 69155 배차 1 8 67503 배차 4 9 61859 배차 9 10 49391 배차 10 11 47253 배차 11 12 41960 배차 8 1 51562 승차 7 2 51655 승차 5 3 61143 승차 2 4 66540 승차 3 5 65392 승차 6 6 60769 승차 0 7 69155 승차 1 8 67503 승차 4 9 61859 승차 9 10 49391 승차 10 11 47253 승차 11 12 41960 승차&gt; . data_month_pivot = data_month.pivot_table(index=[&#39;month&#39;], columns=[&#39;확인&#39;], values=&#39;count&#39;, aggfunc=sum) data_month_pivot . 확인 배차 승차 예정 접수 . month . 1 | 51562 | 51562 | 51562 | 51562 | . 2 | 51655 | 51655 | 51655 | 51655 | . 3 | 61143 | 61143 | 61143 | 61143 | . 4 | 66540 | 66540 | 66540 | 66540 | . 5 | 65392 | 65392 | 65392 | 65392 | . 6 | 60769 | 60769 | 60769 | 60769 | . 7 | 69155 | 69155 | 69155 | 69155 | . 8 | 67503 | 67503 | 67503 | 67503 | . 9 | 61859 | 61859 | 61859 | 61859 | . 10 | 49391 | 49391 | 49391 | 49391 | . 11 | 47253 | 47253 | 47253 | 47253 | . 12 | 41960 | 41960 | 41960 | 41960 | . data_month4.plot(title=&#39;월별 장애인 콜택시 이용수&#39;, rot=0) data_month4.plot.bar(title=&#39;월별 장애인 콜택시 이용수&#39;, rot=0) sns.barplot(data=data_month4, x=&#39;month&#39;, y=&#39;count&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1e74b131288&gt; . #대기시간 정의 [탑승-예정(고객요청시)*접수는 전화 한 시간] data_hour1 = gu_data1[&#39;예정시&#39;].value_counts().reset_index() data_hour1.columns = [&#39;hour&#39;, &#39;count&#39;] data_hour1 = data_hour1.sort_values(&#39;hour&#39;) data_hour1[&#39;확인&#39;] = &#39;예정&#39; data_hour1.head() data_hour2 = gu_data1[&#39;승차시&#39;].value_counts().reset_index() data_hour2.columns = [&#39;hour&#39;, &#39;count&#39;] data_hour2 = data_hour1.sort_values(&#39;hour&#39;) data_hour2[&#39;확인&#39;] = &#39;승차&#39; data_hour2.head() data_hour = pd.concat([data_hour1, data_hour2]) data_hour.head() . hour count 확인 . 20 | 0 | 962 | 예정 | . 22 | 1 | 828 | 예정 | . 21 | 2 | 918 | 예정 | . 17 | 3 | 1890 | 예정 | . 18 | 4 | 1834 | 예정 | . data_hour2 . hour count 확인 . 20 | 0 | 962 | 승차 | . 22 | 1 | 828 | 승차 | . 21 | 2 | 918 | 승차 | . 17 | 3 | 1890 | 승차 | . 18 | 4 | 1834 | 승차 | . 14 | 5 | 6377 | 승차 | . 23 | 6 | 346 | 승차 | . 0 | 7 | 87470 | 승차 | . 6 | 8 | 55715 | 승차 | . 8 | 9 | 42409 | 승차 | . 5 | 10 | 60970 | 승차 | . 1 | 11 | 75870 | 승차 | . 3 | 12 | 71448 | 승차 | . 4 | 13 | 69205 | 승차 | . 2 | 14 | 75500 | 승차 | . 7 | 15 | 53714 | 승차 | . 9 | 16 | 30652 | 승차 | . 10 | 17 | 19051 | 승차 | . 11 | 18 | 12692 | 승차 | . 12 | 19 | 10331 | 승차 | . 13 | 20 | 8172 | 승차 | . 15 | 21 | 4396 | 승차 | . 16 | 22 | 2017 | 승차 | . 19 | 23 | 1415 | 승차 | . plt.figure(figsize=(20,10)) sns.pointplot(data=data_hour2, x=&quot;hour&quot;, y=&quot;count&quot;) sns.barplot(data=data_hour2, x=&quot;hour&quot;, y=&quot;count&quot;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1e74af04c08&gt; . data_week =gu_data1[&#39;승차요일&#39;].value_counts().reset_index() data_week.columns = [&#39;dayofweek&#39;, &#39;count&#39;] data_week = data_week .sort_values(&#39;dayofweek&#39;) print(data_week .shape) . (7, 2) . data_week.head() . dayofweek count . 0 | 0 | 122409 | . 2 | 1 | 116434 | . 3 | 2 | 115774 | . 1 | 3 | 116608 | . 4 | 4 | 115354 | . weekday_map = {0:&#39;월&#39;, 1:&#39;화&#39;, 2:&#39;수&#39;, 3:&#39;목&#39;, 4:&#39;금&#39;, 5:&#39;토&#39;, 6:&#39;일&#39;} data_week[&#39;weekday&#39;] = data_week[&#39;dayofweek&#39;].apply(lambda x : weekday_map[x]) data_week[[&#39;dayofweek&#39;, &#39;weekday&#39;]].head() . dayofweek weekday . 0 | 0 | 월 | . 2 | 1 | 화 | . 3 | 2 | 수 | . 1 | 3 | 목 | . 4 | 4 | 금 | . plt.figure(figsize=(20,10)) sns.pointplot(data=data_week, x=&quot;weekday&quot;, y=&quot;count&quot;) sns.barplot(data=data_week, x=&quot;weekday&quot;, y=&quot;count&quot;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1e74b0eba88&gt; . &#49849;&#54616;&#52264;(&#52636;&#48156;&#44396;/&#46020;&#52265;&#44396;) &#50948;&#52824;&#50640; &#46384;&#47480; &#44396;&#48516; . gu=gu_data1.copy() . #승하차를 같은 구에서 했는지 확인 gu[&#39;출발,도착지 동일&#39;] = gu[&#39;출발구&#39;] == gu[&#39;도착구&#39;] . gu . 접수일시 예정일시 배차일시 승차일시 출발구 출발동 도착구 도착동 요금(원) 휠체어이용여부 ... 배차분 배차요일 승차년월일 승차년 승차월 승차일 승차시 승차분 승차요일 출발,도착지 동일 . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 32 | 1 | 2018-12-18 | 2018 | 12 | 18 | 10 | 32 | 1 | False | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 | 4 | 2018-12-28 | 2018 | 12 | 28 | 22 | 0 | 4 | False | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 40 | 0 | 2018-11-19 | 2018 | 11 | 19 | 16 | 40 | 0 | False | . 5 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 15 | 1 | 2019-03-26 | 2019 | 3 | 26 | 10 | 15 | 1 | False | . 6 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 18 | 6 | 2018-10-07 | 2018 | 10 | 7 | 15 | 18 | 6 | False | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 742674 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | ... | 45 | 2 | 2019-01-30 | 2019 | 1 | 30 | 22 | 14 | 2 | False | . 742675 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | ... | 6 | 4 | 2019-03-01 | 2019 | 3 | 1 | 1 | 30 | 4 | False | . 742676 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | ... | 27 | 2 | 2019-01-30 | 2019 | 1 | 30 | 23 | 43 | 2 | False | . 742677 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | ... | 17 | 2 | 2019-01-30 | 2019 | 1 | 30 | 23 | 49 | 2 | False | . 742678 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | ... | 23 | 4 | 2019-03-01 | 2019 | 3 | 1 | 4 | 12 | 4 | False | . 694182 rows × 58 columns . gu1 = gu[&#39;출발,도착지 동일&#39;].value_counts().reset_index() gu1.columns = [&#39;일치여부&#39;, &#39;출발,도착 수&#39;] # 같은|다른 반납소별로 대여반납수가 몇 배나 차이가 나는지 확인한다. gu2 = gu1[&#39;출발,도착 수&#39;][0]/gu1[&#39;출발,도착 수&#39;][1] print(f&#39;이동이 같은 구에서 이루어지는 것보다 다른구에서 이루어지는 것이 {gu2:.2f}배 많다.&#39;) gu1 . 이동이 같은 구에서 이루어지는 것보다 다른구에서 이루어지는 것이 2.13배 많다. . 일치여부 출발,도착 수 . 0 | False | 472578 | . 1 | True | 221604 | . gu_same_loc = gu.loc[gu[&#39;출발,도착지 동일&#39;] == True] gu_same_loc.head() . 접수일시 예정일시 배차일시 승차일시 출발구 출발동 도착구 도착동 요금(원) 휠체어이용여부 ... 배차분 배차요일 승차년월일 승차년 승차월 승차일 승차시 승차분 승차요일 출발,도착지 동일 . 13 | 2019-01-22 15:43:43.980 | 2019-01-22 17:00:00 | 2019-01-22 17:00:08.680 | 2019-01-22 17:00:17.770 | 관악구 | 낙성대동 | 관악구 | 행운동 | 1500 | ○ | ... | 0 | 1 | 2019-01-22 | 2019 | 1 | 22 | 17 | 0 | 1 | True | . 17 | 2019-01-25 11:14:37.000 | 2019-01-25 11:29:00 | 2019-01-25 11:29:11.897 | 2019-01-25 11:29:20.943 | 송파구 | 오금동 | 송파구 | 마천1동 | 1500 | X | ... | 29 | 4 | 2019-01-25 | 2019 | 1 | 25 | 11 | 29 | 4 | True | . 19 | 2019-06-16 14:03:17.000 | 2019-06-16 14:04:00 | 2019-06-16 14:04:03.653 | 2019-06-16 14:04:21.687 | 송파구 | 장지동 | 송파구 | 잠실3동 | 1500 | ○ | ... | 4 | 6 | 2019-06-16 | 2019 | 6 | 16 | 14 | 4 | 6 | True | . 23 | 2018-12-23 16:43:02.000 | 2018-12-23 16:44:00 | 2018-12-23 16:44:05.273 | 2018-12-23 16:44:23.210 | 노원구 | 월계3동 | 노원구 | 월계2동 | 1500 | X | ... | 44 | 6 | 2018-12-23 | 2018 | 12 | 23 | 16 | 44 | 6 | True | . 30 | 2019-02-07 15:29:15.000 | 2019-02-07 16:38:00 | 2019-02-07 16:38:09.960 | 2019-02-07 16:38:27.970 | 종로구 | 창신제2동 | 종로구 | 창신제3동 | 1500 | X | ... | 38 | 3 | 2019-02-07 | 2019 | 2 | 7 | 16 | 38 | 3 | True | . 5 rows × 58 columns . #같은 구에서 탑승 하차가 많은 곳이 노원구가 가장 큼 gu_same_loc[&#39;출발구&#39;].value_counts().head(30) . 노원구 31851 강서구 16595 강동구 13906 은평구 13654 송파구 12896 양천구 11567 강남구 9834 강북구 9741 관악구 9137 서대문구 8613 중랑구 8226 영등포구 8205 성북구 8067 구로구 7411 마포구 7191 동대문구 7076 서초구 6589 도봉구 6195 동작구 5633 광진구 5245 금천구 3951 성동구 3317 종로구 2819 중구 2276 용산구 1609 Name: 출발구, dtype: int64 . gu_diff_loc = gu.loc[gu[&#39;출발,도착지 동일&#39;] == False] gu_diff_loc.head() . 접수일시 예정일시 배차일시 승차일시 출발구 출발동 도착구 도착동 요금(원) 휠체어이용여부 ... 배차분 배차요일 승차년월일 승차년 승차월 승차일 승차시 승차분 승차요일 출발,도착지 동일 . 1 | 2018-12-18 10:30:57 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 32 | 1 | 2018-12-18 | 2018 | 12 | 18 | 10 | 32 | 1 | False | . 2 | 2018-12-28 21:17:06 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 | 4 | 2018-12-28 | 2018 | 12 | 28 | 22 | 0 | 4 | False | . 4 | 2018-11-19 15:13:04 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 40 | 0 | 2018-11-19 | 2018 | 11 | 19 | 16 | 40 | 0 | False | . 5 | 2019-03-26 10:14:11 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 15 | 1 | 2019-03-26 | 2019 | 3 | 26 | 10 | 15 | 1 | False | . 6 | 2018-10-07 15:17:29 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 18 | 6 | 2018-10-07 | 2018 | 10 | 7 | 15 | 18 | 6 | False | . 5 rows × 58 columns . #다른 구에서 탑승 하차도 많은 곳이 노원구가 가장 큼 gu_diff_loc[&#39;출발구&#39;].value_counts().head(30) . 노원구 40117 강서구 27664 마포구 25456 서대문구 25067 강북구 22323 영등포구 22275 은평구 21476 중랑구 20707 종로구 19807 송파구 19594 동대문구 19393 성북구 19179 강남구 19004 도봉구 18256 강동구 17900 양천구 17832 동작구 17122 관악구 15481 구로구 15404 광진구 13544 성동구 13298 서초구 13011 중구 10750 용산구 10082 금천구 7836 Name: 출발구, dtype: int64 . # 승하차(출발동/도착동) 위치에 따른 구분 . dong=gu_data1.copy() . #승하차를 같은 구에서 했는지 확인 dong[&#39;출발,도착지 동일(동)&#39;] = dong[&#39;출발동&#39;] == dong[&#39;도착동&#39;] . dong_diff=dong[&#39;출발,도착지 동일(동)&#39;].value_counts().reset_index() . dong_diff.columns=[&#39;일치여부&#39;, &#39;출발,도착 수&#39;] . dong_diff_ratio=dong_diff[&#39;출발,도착 수&#39;][0]/dong_diff[&#39;출발,도착 수&#39;][1] . print(f&#39;같은동에서 승.하차 하는것보다 다른곳에서 승하차 하는 것이{dong_diff_ratio:.2f}배 많다&#39;) . 같은동에서 승.하차 하는것보다 다른곳에서 승하차 하는 것이41.44배 많다 . dong_diff . 일치여부 출발,도착 수 . 0 | False | 677824 | . 1 | True | 16358 | . dong_diff.plot.bar(title=&quot;같은 동 승하차여부&quot;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1e74cecdc08&gt; . dong_same_loc = dong.loc[dong[&#39;출발,도착지 동일(동)&#39;] == True] . dong_same_loc[&#39;출발동&#39;].value_counts().head(30) . 성산제2동 901 신내1동 828 하계1동 485 양재1동 472 역촌동 425 진관동 414 흑석동 410 신정3동 374 연희동 304 석관동 286 등촌제3동 278 수서동 275 휘경제2동 272 상계6.7동 247 상계1동 232 시흥제1동 199 영등포동 196 오류제2동 187 인수동 179 구산동 177 상도제1동 164 월계2동 163 둔촌제2동 159 독산제1동 159 도봉제2동 157 세곡동 154 답십리제3동 149 구로제2동 147 불광제2동 147 신촌동 147 Name: 출발동, dtype: int64 . dong_diff_loc = dong.loc[dong[&#39;출발,도착지 동일(동)&#39;] == False] . dong_diff_loc[&#39;출발동&#39;].value_counts().head(30) . 하계1동 14420 상계6.7동 12201 신촌동 11745 성산제2동 9426 역촌동 9262 인수동 8842 신대방제2동 7367 연희동 7212 등촌제3동 6711 신내1동 6589 상암동 6465 영등포동 6440 중계2.3동 6292 이화동 6181 여의동 6174 방화제1동 6140 구의제2동 5543 월계2동 5147 가양제2동 5080 도봉제2동 4960 번제3동 4954 신정6동 4949 신정3동 4859 구산동 4567 풍납2동 4529 수서동 4520 월계3동 4424 둔촌제2동 4358 장지동 4250 종로1.2.3.4가동 4245 Name: 출발동, dtype: int64 . **** 그럼 어떤 구에서 - 어떤 구가 가장 많은지 확인하기 . &#44396;&#50669;&#48324; &#51060;&#46041;&#44144;&#47532;(&#50836;&#44552;&#51060; &#45458;&#51012;&#49688;&#47197; &#51060;&#46041;&#44144;&#47532;&#44032; &#45458;&#45796;) &#54869;&#51064; . same_gu_mean_time = gu_same_loc[&#39;요금(원)&#39;].mean() print(&#39;같은 구에서 출발 도착하는 경우 평균금액(거리추정가능) : &#39;, same_gu_mean_time) gu_same_mean = gu_same_loc.groupby([&#39;출발구&#39;, &#39;도착구&#39;])[&#39;요금(원)&#39;].mean().reset_index() gu_same_count = gu_same_loc.groupby([&#39;출발구&#39;, &#39;도착구&#39;]).size().reset_index() gu_same_count.columns = [&#39;출발구&#39;, &#39;도착구&#39;,&#39;총계&#39;] gu_same_loc2 = gu_same_mean.merge(gu_same_count, left_on=[&#39;출발구&#39;, &#39;도착구&#39;], right_on=[&#39;출발구&#39;, &#39;도착구&#39;]) gu_same_loc2.sort_values(by=&#39;요금(원)&#39;, ascending=False).head(10) . 같은 구에서 출발 도착하는 경우 평균 이동거리 : 1557.3058248046063 . 출발구 도착구 요금(원) 총계 . 0 | 강남구 | 강남구 | 1741.529388 | 9834 | . 22 | 종로구 | 종로구 | 1639.943242 | 2819 | . 14 | 서초구 | 서초구 | 1635.711034 | 6589 | . 17 | 송파구 | 송파구 | 1620.324132 | 12896 | . 6 | 구로구 | 구로구 | 1619.187694 | 7411 | . 12 | 마포구 | 마포구 | 1591.962175 | 7191 | . 13 | 서대문구 | 서대문구 | 1575.188668 | 8613 | . 11 | 동작구 | 동작구 | 1566.536481 | 5633 | . 3 | 강서구 | 강서구 | 1565.784875 | 16595 | . 20 | 용산구 | 용산구 | 1563.393412 | 1609 | . gu_same_loc2.sort_values(by=&#39;요금(원)&#39;, ascending=False).tail(10) . 출발구 도착구 요금(원) 총계 . 10 | 동대문구 | 동대문구 | 1524.773884 | 7076 | . 4 | 관악구 | 관악구 | 1524.439094 | 9137 | . 19 | 영등포구 | 영등포구 | 1522.364412 | 8205 | . 9 | 도봉구 | 도봉구 | 1514.882970 | 6195 | . 16 | 성북구 | 성북구 | 1514.404363 | 8067 | . 15 | 성동구 | 성동구 | 1513.988544 | 3317 | . 2 | 강북구 | 강북구 | 1508.212709 | 9741 | . 24 | 중랑구 | 중랑구 | 1506.686117 | 8226 | . 7 | 금천구 | 금천구 | 1505.087320 | 3951 | . 5 | 광진구 | 광진구 | 1504.575786 | 5245 | . gu_same_loc2.sort_values(by=&#39;총계&#39;, ascending=False).head(10) . 출발구 도착구 요금(원) 총계 . 8 | 노원구 | 노원구 | 1537.515306 | 31851 | . 3 | 강서구 | 강서구 | 1565.784875 | 16595 | . 1 | 강동구 | 강동구 | 1525.557313 | 13906 | . 21 | 은평구 | 은평구 | 1532.708364 | 13654 | . 17 | 송파구 | 송파구 | 1620.324132 | 12896 | . 18 | 양천구 | 양천구 | 1550.289617 | 11567 | . 0 | 강남구 | 강남구 | 1741.529388 | 9834 | . 2 | 강북구 | 강북구 | 1508.212709 | 9741 | . 4 | 관악구 | 관악구 | 1524.439094 | 9137 | . 13 | 서대문구 | 서대문구 | 1575.188668 | 8613 | . diff_gu_mean_time = gu_diff_loc[&#39;요금(원)&#39;].mean() print(&#39;다른 구에서 출발 도착하는 경우 평균금액(거리추정가능) : &#39;, diff_gu_mean_time) gu_diff_mean = gu_diff_loc.groupby([&#39;출발구&#39;, &#39;도착구&#39;])[&#39;요금(원)&#39;].mean().reset_index() gu_diff_count=gu_diff_loc.groupby([&#39;출발구&#39;, &#39;도착구&#39;]).size().reset_index() gu_diff_count.columns = [&#39;출발구&#39;, &#39;도착구&#39;,&#39;총계&#39;] gu_diff_loc2 = gu_diff_mean.merge(gu_diff_count, left_on=[&#39;출발구&#39;, &#39;도착구&#39;], right_on=[&#39;출발구&#39;, &#39;도착구&#39;]) gu_diff_loc2.sort_values(by=&#39;요금(원)&#39;, ascending=False).head(10) . 다른 구에서 출발 도착하는 경우 평균금액(거리추정가능) : 2562.102996753975 . 출발구 도착구 요금(원) 총계 . 176 | 금천구 | 도봉구 | 5003.703704 | 27 | . 223 | 도봉구 | 금천구 | 4809.523810 | 21 | . 152 | 구로구 | 도봉구 | 4730.555556 | 72 | . 175 | 금천구 | 노원구 | 4693.706294 | 143 | . 26 | 강동구 | 강서구 | 4690.719258 | 431 | . 199 | 노원구 | 금천구 | 4665.600000 | 125 | . 73 | 강서구 | 강동구 | 4621.813725 | 408 | . 41 | 강동구 | 양천구 | 4616.939891 | 183 | . 219 | 도봉구 | 강서구 | 4596.491228 | 171 | . 220 | 도봉구 | 관악구 | 4591.803279 | 61 | . ** &#50612;&#46500; &#44396;&#50640;&#49436; - &#50612;&#46500; &#44396;&#44032; &#44032;&#51109; &#47566;&#51008;&#51648; &#54869;&#51064;&#54616;&#44592; . print(&#39;다른 구에서 출발 도착하는 카운트&#39;) gu_diff_count.sort_values(by=&#39;총계&#39;, ascending=False).head(10) . 다른 구에서 출발 도착하는 카운트 . 출발구 도착구 총계 . 200 | 노원구 | 도봉구 | 7270 | . 224 | 도봉구 | 노원구 | 6674 | . 300 | 마포구 | 서대문구 | 6634 | . 194 | 노원구 | 강북구 | 6627 | . 324 | 서대문구 | 마포구 | 6410 | . 55 | 강북구 | 노원구 | 6182 | . 89 | 강서구 | 양천구 | 5853 | . 215 | 노원구 | 중랑구 | 5818 | . 584 | 중랑구 | 노원구 | 5652 | . 435 | 양천구 | 강서구 | 5591 | . gu_diff_count.sort_values(by=&#39;총계&#39;, ascending=False).tail(10) . 출발구 도착구 총계 . 190 | 금천구 | 중구 | 52 | . 279 | 동작구 | 성북구 | 50 | . 104 | 관악구 | 도봉구 | 50 | . 126 | 광진구 | 금천구 | 49 | . 54 | 강북구 | 금천구 | 43 | . 247 | 동대문구 | 금천구 | 33 | . 183 | 금천구 | 성북구 | 32 | . 176 | 금천구 | 도봉구 | 27 | . 223 | 도봉구 | 금천구 | 21 | . 391 | 성북구 | 금천구 | 19 | . &#44057;&#51008; &#46041;&#50640;&#49436; &#52636;&#48156; &#46020;&#52265;&#54616;&#45716; &#44221;&#50864; &#54217;&#44512; &#54217;&#44512;&#44552;&#50529;(&#44144;&#47532;&#52628;&#51221;&#44032;&#45733;) . same_dong_mean_time = dong_same_loc[&#39;요금(원)&#39;].mean() print(&#39;같은 동에서 출발 도착하는 경우 평균 평균금액(거리추정가능) : &#39;, same_dong_mean_time) dong_same_mean =dong_same_loc.groupby([&#39;출발동&#39;, &#39;도착동&#39;])[&#39;요금(원)&#39;].mean().reset_index() dong_same_count =dong_same_loc.groupby([&#39;출발동&#39;, &#39;도착동&#39;]).size().reset_index() dong_same_count.columns = [&#39;출발동&#39;, &#39;도착동&#39;,&#39;총계&#39;] dong_same_loc2 =dong_same_mean.merge(dong_same_count, left_on=[&#39;출발동&#39;, &#39;도착동&#39;], right_on=[&#39;출발동&#39;, &#39;도착동&#39;]) dong_same_loc2.sort_values(by=&#39;요금(원)&#39;, ascending=False).head(10) . 같은 동에서 출발 도착하는 경우 평균 평균금액(거리추정가능) : 1502.9587969189388 . 출발동 도착동 요금(원) 총계 . 268 | 잠원동 | 잠원동 | 3100.000000 | 1 | . 88 | 면목본동 | 면목본동 | 2900.000000 | 1 | . 282 | 제기제2동 | 제기제2동 | 2300.000000 | 2 | . 185 | 시흥제3동 | 시흥제3동 | 1900.000000 | 2 | . 253 | 응암제1동 | 응암제1동 | 1728.571429 | 7 | . 169 | 성수2가제3동 | 성수2가제3동 | 1700.000000 | 1 | . 256 | 이문제3동 | 이문제3동 | 1700.000000 | 7 | . 261 | 일원1동 | 일원1동 | 1666.666667 | 12 | . 6 | 가양제3동 | 가양제3동 | 1591.666667 | 24 | . 213 | 신정4동 | 신정4동 | 1583.333333 | 30 | . dong_same_loc2.sort_values(by=&#39;요금(원)&#39;, ascending=False).tail(10) . 출발동 도착동 요금(원) 총계 . 142 | 상계3.4동 | 상계3.4동 | 1500.0 | 6 | . 140 | 상계1동 | 상계1동 | 1500.0 | 232 | . 132 | 사직동 | 사직동 | 1500.0 | 2 | . 139 | 삼전동 | 삼전동 | 1500.0 | 1 | . 138 | 삼양동 | 삼양동 | 1500.0 | 3 | . 137 | 삼성동 | 삼성동 | 1500.0 | 106 | . 135 | 삼성1동 | 삼성1동 | 1500.0 | 6 | . 134 | 삼선동 | 삼선동 | 1500.0 | 23 | . 133 | 삼각산동 | 삼각산동 | 1500.0 | 6 | . 0 | 가락1동 | 가락1동 | 1500.0 | 1 | . diff_dong_mean_time = dong_diff_loc[&#39;요금(원)&#39;].mean() print(&#39;다은 동에서 출발 도착하는 경우 평균 평균금액(거리추정가능) : &#39;, diff_dong_mean_time) dong_diff_mean =dong_diff_loc.groupby([&#39;출발동&#39;, &#39;도착동&#39;])[&#39;요금(원)&#39;].mean().reset_index() dong_diff_count =dong_diff_loc.groupby([&#39;출발동&#39;, &#39;도착동&#39;]).size().reset_index() dong_diff_count.columns = [&#39;출발동&#39;, &#39;도착동&#39;,&#39;총계&#39;] dong_diff_loc2 =dong_diff_mean.merge(dong_diff_count, left_on=[&#39;출발동&#39;, &#39;도착동&#39;], right_on=[&#39;출발동&#39;, &#39;도착동&#39;]) dong_diff_loc2.sort_values(by=&#39;요금(원)&#39;, ascending=False).head(10) . 다은 동에서 출발 도착하는 경우 평균 평균금액(거리추정가능) : 2259.160652322727 . 출발동 도착동 요금(원) 총계 . 38705 | 영종동 | 논현1동 | 14100.0 | 1 | . 1651 | 강일동 | 영종동 | 7800.0 | 1 | . 46269 | 장지동 | 영종동 | 7750.0 | 6 | . 48961 | 중계본동 | 영종동 | 7700.0 | 2 | . 2285 | 거여1동 | 영종동 | 7600.0 | 2 | . 7604 | 내곡동 | 영종동 | 7600.0 | 1 | . 18239 | 방학제3동 | 영종동 | 7600.0 | 1 | . 17852 | 방이2동 | 영종동 | 7600.0 | 1 | . 3789 | 광장동 | 영종동 | 7600.0 | 1 | . 3422 | 공릉2동 | 영종동 | 7550.0 | 2 | . # **** 어떤 동에서 - 어떤 동의 이동이 가장 많은지 확인하기 . print(&#39;다른 동에서 출발 도착하는 카운트&#39;) dong_diff_count.sort_values(by=&#39;총계&#39;, ascending=False).head(10) . 다른 동에서 출발 도착하는 카운트 . 출발동 도착동 총계 . 53212 | 하계1동 | 상계6.7동 | 1280 | . 27201 | 성산제2동 | 역촌동 | 918 | . 22684 | 상계1동 | 하계1동 | 843 | . 23187 | 상계6.7동 | 상계1동 | 786 | . 38044 | 연희동 | 성산제2동 | 760 | . 18342 | 방화제1동 | 등촌제3동 | 727 | . 34490 | 신정6동 | 신정3동 | 722 | . 19427 | 번제3동 | 인수동 | 718 | . 23347 | 상계6.7동 | 하계1동 | 710 | . 34142 | 신정3동 | 신정6동 | 703 | . dong_diff_count.sort_values(by=&#39;총계&#39;, ascending=False).tail(10) . 출발동 도착동 총계 . 40680 | 월계1동 | 번제1동 | 1 | . 40679 | 월계1동 | 방학제2동 | 1 | . 19821 | 보문동 | 자양제3동 | 1 | . 19822 | 보문동 | 잠실3동 | 1 | . 40676 | 월계1동 | 발산제1동 | 1 | . 40675 | 월계1동 | 반포4동 | 1 | . 40674 | 월계1동 | 미아동 | 1 | . 40673 | 월계1동 | 문정2동 | 1 | . 40672 | 월계1동 | 문래동 | 1 | . 28746 | 송파2동 | 천호제1동 | 1 | . &#46041; &#52628;&#52636;&#54644;&#49436; &#51340;&#54364; &#46384;&#44256; &#51648;&#46020;&#54868; &#48143; &#44400;&#51665; . #좌표 따오기 위한 전처리 (동만 추출 하기) . import_dong=gu_data.copy() . a_dong=import_dong.drop_duplicates([&#39;도착동&#39;]) . a_dong . 접수일시 예정일시 배차일시 승차일시 출발구 출발동 도착구 도착동 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . 5 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.213950 | 49.000 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | . 6 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.218833 | 31.000 | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 12770 | 2019-05-01 15:02:24.000 | 2019-05-01 15:03:00 | 2019-05-01 15:10:50.963 | 2019-05-01 15:17:14.907 | 강동구 | 둔촌제2동 | 강동구 | 둔촌제1동 | 1500 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 14.248450 | 36.000 | 470.963 | 506.963 | 890.907 | 854.907 | 383.944 | . 14783 | 2019-05-26 11:59:48.883 | 2019-05-26 12:00:00 | 2019-05-26 12:03:51.547 | 2019-05-26 12:14:51.630 | 강동구 | 천호제1동 | 송파구 | 잠실7동 | 2900 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 14.860500 | 11.117 | 231.547 | 242.664 | 902.747 | 891.630 | 660.083 | . 36559 | 2019-04-08 10:59:57.000 | 2019-04-08 11:00:00 | 2019-04-08 11:09:01.013 | 2019-04-08 11:19:04.083 | 영등포구 | 여의동 | 서초구 | 반포본동 | 2900 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 19.068050 | 3.000 | 541.013 | 544.013 | 1147.083 | 1144.083 | 603.070 | . 205216 | 2019-03-11 11:57:32.000 | 2019-03-12 07:00:00 | 2019-03-12 07:08:40.257 | 2019-03-12 07:36:58.470 | 강남구 | 청담동 | 중구 | 신흥동 | 6800 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 36.974500 | 68548.000 | 520.257 | 69068.257 | 70766.470 | 2218.470 | 1698.213 | . 723294 | 2019-05-27 08:08:22.520 | 2019-05-27 08:09:00 | 2019-05-27 10:06:23.910 | 2019-05-27 10:38:23.910 | 강북구 | 우이동 | 강북구 | 수유3동 | 1500 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 149.398500 | 37.480 | 7043.910 | 7081.390 | 9001.390 | 8963.910 | 1920.000 | . 434 rows × 28 columns . d_dong=import_dong.drop_duplicates([&#39;출발동&#39;]) . d_dong . 접수일시 예정일시 배차일시 승차일시 출발구 출발동 도착구 도착동 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . 5 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.213950 | 49.000 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | . 6 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.218833 | 31.000 | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 11640 | 2019-02-07 10:14:48.863 | 2019-02-07 10:15:00 | 2019-02-07 10:18:14.020 | 2019-02-07 10:28:53.130 | 용산구 | 용산2가동 | 성북구 | 월곡제2동 | 3000 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 13.885500 | 11.137 | 194.020 | 205.157 | 844.267 | 833.130 | 639.110 | . 11958 | 2019-07-15 11:43:35.000 | 2019-07-15 11:44:00 | 2019-07-15 11:52:35.520 | 2019-07-15 11:57:59.440 | 동작구 | 사당제4동 | 관악구 | 낙성대동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 13.990667 | 25.000 | 515.520 | 540.520 | 864.440 | 839.440 | 323.920 | . 13406 | 2019-06-29 18:40:14.000 | 2019-06-29 18:41:00 | 2019-06-29 18:41:11.437 | 2019-06-29 18:55:26.490 | 종로구 | 숭인제1동 | 양천구 | 목3동 | 4000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 14.441500 | 46.000 | 11.437 | 57.437 | 912.490 | 866.490 | 855.053 | . 14897 | 2019-01-15 10:58:39.000 | 2019-01-15 10:59:00 | 2019-01-15 10:59:05.207 | 2019-01-15 11:13:53.333 | 관악구 | 대학동 | 강북구 | 삼각산동 | 4300 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 14.888883 | 21.000 | 5.207 | 26.207 | 914.333 | 893.333 | 888.126 | . 40621 | 2018-11-02 12:13:54.000 | 2018-11-02 12:14:00 | 2018-11-02 12:18:03.440 | 2018-11-02 12:33:39.330 | 용산구 | 이태원제2동 | 중구 | 신당제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 19.655500 | 6.000 | 243.440 | 249.440 | 1185.330 | 1179.330 | 935.890 | . 432 rows × 28 columns . a_dong.to_csv(&#39;a_dong&#39;,sep=&#39;,&#39;,header=False, index=False) d_dong.to_csv(&#39;d_dong&#39;,sep=&#39;,&#39;,header=False, index=False) . 구글api를 통해 좌표를 가져오는데 오류가 생겨 좌표 가져오는 작업만 R 로 진행 오류코드list index out of range . #import googlemaps #gmaps = googlemaps.Client(key=&quot;AIzaSyA-6VEEfZKq7lPCzD5aogGJPCqxHJArdN8&quot;) #lat = [] #lng = [] #for name in depart_dong_coordinate[&#39;Depart_dong&#39;]: # tmpMap = gmaps.geocode(name) # tmpLoc = tmpMap[0].get(&quot;geometry&quot;) # lat.append(tmpLoc[&#39;location&#39;][&#39;lat&#39;]) # lng.append(tmpLoc[&#39;location&#39;][&#39;lng&#39;]) #depart_dong_coordinate[&#39;lat&#39;] = lat #depart_dong_coordinate[&#39;lng&#39;] = lng #depart_dong_coordinate.head() #depart_dong_coordinate[Coordinate]=depart_dong_coordinate[&#39;Depart_dong&#39;].map(lambda x : getGeoData(x)) . File &#34;&lt;ipython-input-361-59a1ed7f3042&gt;&#34;, line 8 tmpMap []= gmaps.geocode(name) ^ SyntaxError: invalid syntax . R&#47196; &#51089;&#50629; &#54620; &#52636;&#48156; &#46041; , &#46020;&#52265; &#46041; &#48324; &#51340;&#54364; &#46384;&#50728; &#54028;&#51068; &#50629;&#47196;&#46300; . Departure_dong_coordi=pd.read_csv(&#39;d_dong_coor_1217.csv&#39;,index_col=0,encoding=&#39;euc-kr&#39;) . Departure_dong_coordi . d_lon d_lat . Departure_dong . 제기제2동 | 127.041907 | 37.585617 | . 자양제2동 | 127.071581 | 37.532401 | . 창제5동 | 127.039100 | 37.651915 | . 신설동 | 127.024850 | 37.575326 | . 고척제2동 | 126.858317 | 37.506512 | . ... | ... | ... | . 용산2가동 | 126.985442 | 37.545871 | . 사당제4동 | 126.981633 | 37.476559 | . 숭인제1동 | 127.015632 | 37.577784 | . 대학동 | 126.936893 | 37.470546 | . 이태원제2동 | 126.990191 | 37.541899 | . 432 rows × 2 columns . Arrival_dong_coordi=pd.read_csv(&#39;a_dong_coor_1217.csv&#39;,index_col=0,encoding=&#39;euc-kr&#39;) . Arrival_dong_coordi . a_lon a_lat . Arrival_dong . 하계1동 | 127.072569 | 37.640556 | . 답십리제1동 | 127.051518 | 37.571647 | . 번제3동 | 127.046572 | 37.625834 | . 남영동 | 126.974415 | 37.545566 | . 신정6동 | 126.864371 | 37.516983 | . ... | ... | ... | . 둔촌제1동 | 127.136733 | 37.523460 | . 잠실7동 | 127.082993 | 37.512899 | . 반포본동 | 127.007917 | 37.503183 | . 신흥동 | 127.148068 | 37.448781 | . 수유3동 | 127.023158 | 37.638860 | . 434 rows × 2 columns . gu_list_kr =[&#39;강남구&#39;,&#39;강동구&#39;,&#39;강북구&#39;,&#39;강서구&#39;,&#39;관악구&#39;,&#39;광진구&#39;,&#39;구로구&#39;,&#39;금천구&#39;,&#39;노원구&#39;,&#39;도봉구&#39;,&#39;동대문구&#39;,&#39;동작구&#39;,&#39;마포구&#39;,&#39;서대문구&#39;,&#39;서초구&#39;,&#39;성동구&#39;,&#39;성북구&#39;,&#39;송파구&#39;,&#39;양천구&#39;,&#39;영등포구&#39;,&#39;용산구&#39;,&#39;은평구&#39;,&#39;종로구&#39;,&#39;중구&#39;,&#39;중랑구&#39;] data_coor = call[ call[&#39;출발(구)&#39;].isin(gu_list_kr)&amp; call[&#39;도착(구)&#39;].isin(gu_list_kr) ] ### &amp; = and | =or . #★★★★★★ dong_coor=data_coor.copy() . dong_coor.rename(columns={&#39;도착(동)&#39;:&#39;Arrival_dong&#39;},inplace=True) dong_coor.rename(columns={&#39;출발(동)&#39;:&#39;Departure_dong&#39;},inplace=True) . dong_coor.head(5) . 접수일시 예정일시 배차일시 승차일시 출발(구) Departure_dong 도착(구) Arrival_dong 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 1 | 2018-12-18 10:30:57 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.0 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.0 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 4 | 2018-11-19 15:13:04 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.0 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . 5 | 2019-03-26 10:14:11 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.213950 | 49.0 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | . 6 | 2018-10-07 15:17:29 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.218833 | 31.0 | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | . 5 rows × 28 columns . Coordi=pd.merge(dong_coor,Arrival_dong_coordi,how=&#39;left&#39;,on=&#39;Arrival_dong&#39;) . k[k[&#39;a_lon&#39;].isnull()] . 접수일시 예정일시 배차일시 승차일시 출발(구) Departure_dong 도착(구) Arrival_dong 요금(원) 휠체어이용여부 ... 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 a_lon a_lat . 0 rows × 30 columns . Coordi_final=pd.merge(Coordi,Departure_dong_coordi,how=&#39;left&#39;,on=&#39;Departure_dong&#39;) . Coordi_final[Coordi_final[&#39;d_lon&#39;].isnull()] . 접수일시 예정일시 배차일시 승차일시 출발(구) Departure_dong 도착(구) Arrival_dong 요금(원) 휠체어이용여부 ... 예-접 배-예 배-접 승-접 승-예 승-배 a_lon a_lat d_lon d_lat . 0 rows × 32 columns . Coordi_final . 접수일시 예정일시 배차일시 승차일시 출발(구) Departure_dong 도착(구) Arrival_dong 요금(원) 휠체어이용여부 ... 예-접 배-예 배-접 승-접 승-예 승-배 a_lon a_lat d_lon d_lat . 0 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | 127.072569 | 37.640556 | 127.041907 | 37.585617 | . 1 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | 127.051518 | 37.571647 | 127.071581 | 37.532401 | . 2 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | 127.046572 | 37.625834 | 127.039100 | 37.651915 | . 3 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 49.000 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | 126.974415 | 37.545566 | 127.024850 | 37.575326 | . 4 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 31.000 | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | 126.864371 | 37.516983 | 126.858317 | 37.506512 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 694177 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | ... | 2.080 | 20864.497 | 20866.577 | 22618.820 | 22616.740 | 1752.243 | 127.035100 | 37.668302 | 127.015412 | 37.303541 | . 694178 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | ... | 10.000 | 21191.237 | 21201.237 | 22641.343 | 22631.343 | 1440.106 | 126.585970 | 33.521623 | 127.037393 | 37.499907 | . 694179 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | ... | 25.433 | 21700.793 | 21726.226 | 22701.326 | 22675.893 | 975.100 | 127.038628 | 37.632139 | 126.896228 | 37.526372 | . 694180 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | ... | 24.183 | 21720.020 | 21744.203 | 23670.500 | 23646.317 | 1926.297 | 127.050738 | 37.632444 | 126.924373 | 37.498356 | . 694181 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | ... | 34.000 | 21962.890 | 21996.890 | 24991.187 | 24957.187 | 2994.297 | 126.863287 | 37.533009 | 127.106540 | 37.601255 | . 694182 rows × 32 columns . Coordi_final[&#39;Arrival_dong_1&#39;]=Coordi_final[&#39;Arrival_dong&#39;] . Coordi_final . 접수일시 예정일시 배차일시 승차일시 출발(구) Departure_dong 도착(구) Arrival_dong 요금(원) 휠체어이용여부 ... 배-예 배-접 승-접 승-예 승-배 a_lon a_lat d_lon d_lat Arrival_dong_1 . 0 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | 127.072569 | 37.640556 | 127.041907 | 37.585617 | 하계1동 | . 1 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | 127.051518 | 37.571647 | 127.071581 | 37.532401 | 답십리제1동 | . 2 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | 127.046572 | 37.625834 | 127.039100 | 37.651915 | 번제3동 | . 3 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | 126.974415 | 37.545566 | 127.024850 | 37.575326 | 남영동 | . 4 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | 126.864371 | 37.516983 | 126.858317 | 37.506512 | 신정6동 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 694177 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | ... | 20864.497 | 20866.577 | 22618.820 | 22616.740 | 1752.243 | 127.035100 | 37.668302 | 127.015412 | 37.303541 | 방학제2동 | . 694178 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | ... | 21191.237 | 21201.237 | 22641.343 | 22631.343 | 1440.106 | 126.585970 | 33.521623 | 127.037393 | 37.499907 | 삼양동 | . 694179 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | ... | 21700.793 | 21726.226 | 22701.326 | 22675.893 | 975.100 | 127.038628 | 37.632139 | 126.896228 | 37.526372 | 번제2동 | . 694180 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | ... | 21720.020 | 21744.203 | 23670.500 | 23646.317 | 1926.297 | 127.050738 | 37.632444 | 126.924373 | 37.498356 | 월계2동 | . 694181 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | ... | 21962.890 | 21996.890 | 24991.187 | 24957.187 | 2994.297 | 126.863287 | 37.533009 | 127.106540 | 37.601255 | 화곡제4동 | . 694182 rows × 33 columns . Coordi_final_a=Coordi_final.groupby([&#39;Arrival_dong&#39;,&#39;a_lat&#39;,&#39;a_lon&#39;])[&#39;Arrival_dong_1&#39;].count().reset_index() . Coordi_final_a . Arrival_dong a_lat a_lon Arrival_dong_1 . 0 | 가락1동 | 37.495278 | 127.115713 | 402 | . 1 | 가락2동 | 37.495278 | 127.115713 | 573 | . 2 | 가락본동 | 37.495278 | 127.115713 | 2000 | . 3 | 가리봉동 | 37.482394 | 126.888251 | 804 | . 4 | 가산동 | 37.475879 | 126.883830 | 982 | . ... | ... | ... | ... | ... | . 429 | 효창동 | 37.541732 | 126.961305 | 1153 | . 430 | 후암동 | 37.549892 | 126.981421 | 1087 | . 431 | 휘경제1동 | 37.592866 | 127.065683 | 432 | . 432 | 휘경제2동 | 37.590994 | 127.068402 | 3577 | . 433 | 흑석동 | 37.509486 | 126.960528 | 2412 | . 434 rows × 4 columns . Coordi_final_a.dtypes . Arrival_dong object a_lat float64 a_lon float64 Arrival_dong_1 int64 dtype: object . Coordi_final_a.Arrival_dong_1=Coordi_final_a.Arrival_dong_1.astype(float) . Coordi_final_a.dtypes . Arrival_dong object a_lat float64 a_lon float64 Arrival_dong_1 float64 dtype: object . #!pip install folium . Collecting folium Downloading https://files.pythonhosted.org/packages/fd/a0/ccb3094026649cda4acd55bf2c3822bb8c277eb11446d13d384e5be35257/folium-0.10.1-py2.py3-none-any.whl (91kB) Collecting branca&gt;=0.3.0 (from folium) Downloading https://files.pythonhosted.org/packages/63/36/1c93318e9653f4e414a2e0c3b98fc898b4970e939afeedeee6075dd3b703/branca-0.3.1-py3-none-any.whl Requirement already satisfied: jinja2&gt;=2.9 in c: users angie anaconda3 lib site-packages (from folium) (2.10.3) Requirement already satisfied: requests in c: users angie anaconda3 lib site-packages (from folium) (2.22.0) Requirement already satisfied: numpy in c: users angie anaconda3 lib site-packages (from folium) (1.16.5) Requirement already satisfied: six in c: users angie anaconda3 lib site-packages (from branca&gt;=0.3.0-&gt;folium) (1.12.0) Requirement already satisfied: MarkupSafe&gt;=0.23 in c: users angie anaconda3 lib site-packages (from jinja2&gt;=2.9-&gt;folium) (1.1.1) Requirement already satisfied: certifi&gt;=2017.4.17 in c: users angie anaconda3 lib site-packages (from requests-&gt;folium) (2019.9.11) Requirement already satisfied: idna&lt;2.9,&gt;=2.5 in c: users angie anaconda3 lib site-packages (from requests-&gt;folium) (2.8) Requirement already satisfied: chardet&lt;3.1.0,&gt;=3.0.2 in c: users angie anaconda3 lib site-packages (from requests-&gt;folium) (3.0.4) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in c: users angie anaconda3 lib site-packages (from requests-&gt;folium) (1.24.2) Installing collected packages: branca, folium Successfully installed branca-0.3.1 folium-0.10.1 . import folium import json . map = folium.Map(location=[37.5502, 126.982], zoom_start=11) . for n in Coordi_final_a.index: folium.CircleMarker([Coordi_final_a[&#39;a_lat&#39;][n], Coordi_final_a[&#39;a_lon&#39;][n]], radius = Coordi_final_a[&#39;Arrival_dong_1&#39;][n]*0.000001, color=&#39;#3186cc&#39;, fill_color=&#39;#3186cc&#39;, fill=True).add_to(map) . map . &#55072;&#52404;&#50612; &#50976;&#48036;&#47484; &#44592;&#51456;&#51004;&#47196;&#54620; &#48708;&#44368;(&#45824;&#44592;&#49884;&#44036;) . #휠체어 데이터 O=1 ,x=0으로 하여 데이터 정제 : T분포 이용 . gu_list_kr =[&#39;강남구&#39;,&#39;강동구&#39;,&#39;강북구&#39;,&#39;강서구&#39;,&#39;관악구&#39;,&#39;광진구&#39;,&#39;구로구&#39;,&#39;금천구&#39;,&#39;노원구&#39;,&#39;도봉구&#39;,&#39;동대문구&#39;,&#39;동작구&#39;,&#39;마포구&#39;,&#39;서대문구&#39;,&#39;서초구&#39;,&#39;성동구&#39;,&#39;성북구&#39;,&#39;송파구&#39;,&#39;양천구&#39;,&#39;영등포구&#39;,&#39;용산구&#39;,&#39;은평구&#39;,&#39;종로구&#39;,&#39;중구&#39;,&#39;중랑구&#39;] wheelchair = call[ call[&#39;출발(구)&#39;].isin(gu_list_kr)&amp; call[&#39;도착(구)&#39;].isin(gu_list_kr) ] ### &amp; = and | =or . wheelchair . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . 5 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.213950 | 49.000 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | . 6 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.218833 | 31.000 | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 742674 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 376.945667 | 2.080 | 20864.497 | 20866.577 | 22618.820 | 22616.740 | 1752.243 | . 742675 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.189050 | 10.000 | 21191.237 | 21201.237 | 22641.343 | 22631.343 | 1440.106 | . 742676 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.931550 | 25.433 | 21700.793 | 21726.226 | 22701.326 | 22675.893 | 975.100 | . 742677 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 394.105283 | 24.183 | 21720.020 | 21744.203 | 23670.500 | 23646.317 | 1926.297 | . 742678 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 415.953117 | 34.000 | 21962.890 | 21996.890 | 24991.187 | 24957.187 | 2994.297 | . 694182 rows × 28 columns . wheelchair.loc[wheelchair.휠체어이용여부==&#39;○&#39;, &#39;휠체어이용여부&#39;] = 1 wheelchair.loc[wheelchair.휠체어이용여부==&#39;X&#39;, &#39;휠체어이용여부&#39;] = 0 . wheelchair . 접수일시 예정일시 배차일시 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 ... 1분 5분 0분 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 1 | 2018-12-18 10:30:57.000 | 2018-12-18 10:32:00 | 2018-12-18 10:32:00.687 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | 1 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.162167 | 63.000 | 0.687 | 63.687 | 72.730 | 9.730 | 9.043 | . 2 | 2018-12-28 21:17:06.000 | 2018-12-28 22:00:00 | 2018-12-28 22:00:07.027 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | 1 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.167450 | 2574.000 | 7.027 | 2581.027 | 2584.047 | 10.047 | 3.020 | . 4 | 2018-11-19 15:13:04.000 | 2018-11-19 16:40:00 | 2018-11-19 16:40:03.633 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | 0 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.212167 | 5216.000 | 3.633 | 5219.633 | 5228.730 | 12.730 | 9.097 | . 5 | 2019-03-26 10:14:11.000 | 2019-03-26 10:15:00 | 2019-03-26 10:15:06.820 | 2019-03-26 10:15:12.837 | 동대문구 | 신설동 | 용산구 | 남영동 | 2000 | 1 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.213950 | 49.000 | 6.820 | 55.820 | 61.837 | 12.837 | 6.017 | . 6 | 2018-10-07 15:17:29.000 | 2018-10-07 15:18:00 | 2018-10-07 15:18:04.100 | 2018-10-07 15:18:13.130 | 구로구 | 고척제2동 | 양천구 | 신정6동 | 1500 | 1 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 0.218833 | 31.000 | 4.100 | 35.100 | 44.130 | 13.130 | 9.030 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 742674 | 2019-01-30 15:57:57.920 | 2019-01-30 15:58:00 | 2019-01-30 21:45:44.497 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | 1 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 376.945667 | 2.080 | 20864.497 | 20866.577 | 22618.820 | 22616.740 | 1752.243 | . 742675 | 2019-02-28 19:12:50.000 | 2019-02-28 19:13:00 | 2019-03-01 01:06:11.237 | 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | 0 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.189050 | 10.000 | 21191.237 | 21201.237 | 22641.343 | 22631.343 | 1440.106 | . 742676 | 2019-01-30 17:25:34.567 | 2019-01-30 17:26:00 | 2019-01-30 23:27:40.793 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | 1 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 377.931550 | 25.433 | 21700.793 | 21726.226 | 22701.326 | 22675.893 | 975.100 | . 742677 | 2019-01-30 17:14:35.817 | 2019-01-30 17:15:00 | 2019-01-30 23:17:00.020 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | 1 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 394.105283 | 24.183 | 21720.020 | 21744.203 | 23670.500 | 23646.317 | 1926.297 | . 742678 | 2019-02-28 21:16:26.000 | 2019-02-28 21:17:00 | 2019-03-01 03:23:02.890 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | 0 | ... | 0 days 00:01:00.000000000 | 0 days 00:05:00.000000000 | 0 days 00:00:00.000000000 | 415.953117 | 34.000 | 21962.890 | 21996.890 | 24991.187 | 24957.187 | 2994.297 | . 694182 rows × 28 columns . wheelchair.corr() . 요금(원) 휠체어이용여부 대기시간m 예-접 배-예 배-접 승-접 승-예 승-배 . 요금(원) | 1.000000 | -0.018743 | 0.086935 | 0.059399 | 0.066455 | 0.068747 | 0.071502 | 0.086935 | 0.099294 | . 휠체어이용여부 | -0.018743 | 1.000000 | 0.059666 | 0.159903 | 0.053227 | 0.169955 | 0.170791 | 0.059666 | 0.036083 | . 대기시간m | 0.086935 | 0.059666 | 1.000000 | -0.233192 | 0.973378 | -0.121458 | -0.113829 | 1.000000 | 0.262516 | . 예-접 | 0.059399 | 0.159903 | -0.233192 | 1.000000 | -0.246493 | 0.993185 | 0.992654 | -0.233192 | 0.020913 | . 배-예 | 0.066455 | 0.053227 | 0.973378 | -0.246493 | 1.000000 | -0.131861 | -0.130730 | 0.973378 | 0.034360 | . 배-접 | 0.068747 | 0.169955 | -0.121458 | 0.993185 | -0.131861 | 1.000000 | 0.999593 | -0.121458 | 0.025523 | . 승-접 | 0.071502 | 0.170791 | -0.113829 | 0.992654 | -0.130730 | 0.999593 | 1.000000 | -0.113829 | 0.054028 | . 승-예 | 0.086935 | 0.059666 | 1.000000 | -0.233192 | 0.973378 | -0.121458 | -0.113829 | 1.000000 | 0.262516 | . 승-배 | 0.099294 | 0.036083 | 0.262516 | 0.020913 | 0.034360 | 0.025523 | 0.054028 | 0.262516 | 1.000000 | . &#53685;&#44228; &#45796; &#46412;&#47140;&#45347;&#44592; . data2.corr()#상관계수 #1. 연속형(숫자로 표현 가능한) 데이터에 대해서만 상관관계 분석이 가능한점 #2. -1부터 1까지의 값으로 상관관계의 크기를 보여준다는 점 #3. 증가하는 방향성에 대한 것인지. 인과관계를 의미하지는 않다는 점. #r이 -1.0과 -0.7 사이이면, 강한 음적 선형관계, #r이 -0.7과 -0.3 사이이면, 뚜렷한 음적 선형관계, #r이 -0.3과 -0.1 사이이면, 약한 음적 선형관계, #r이 -0.1과 +0.1 사이이면, 거의 무시될 수 있는 선형관계, #r이 +0.1과 +0.3 사이이면, 약한 양적 선형관계, #r이 +0.3과 +0.7 사이이면, 뚜렷한 양적 선형관계, #r이 +0.7과 +1.0 사이이면, 강한 양적 선형관계 . 요금(원) 대기시간m . 요금(원) | 1.000000 | 0.098441 | . 대기시간m | 0.098441 | 1.000000 | . data2.cov()#공분산 . 요금(원) 대기시간m . 요금(원) | 892530.740058 | 3391.619728 | . 대기시간m | 3391.619728 | 1329.954091 | . data2.dtypes . 접수일시 datetime64[ns] 예정일시 datetime64[ns] 배차일시 datetime64[ns] 승차일시 datetime64[ns] 출발(구) object 출발(동) object 도착(구) object 도착(동) object 요금(원) int64 휠체어이용여부 object 장애등급명 object 접수방법 object 예정-접수 timedelta64[ns] 배차-예정 timedelta64[ns] 배차-접수 timedelta64[ns] 승차-접수 timedelta64[ns] 승차-예정 timedelta64[ns] 승차-배차 timedelta64[ns] 1분 timedelta64[ns] 5분 timedelta64[ns] 0분 timedelta64[ns] 대기시간m float64 예정일 datetime64[ns] 예정시 datetime64[ns] 승차일 datetime64[ns] 승차시 datetime64[ns] dtype: object . data2[&#39;예정-접수&#39;].values.view(&#39;&lt;i8&#39;)/10**9 . array([4.60493062e+09, 4.60740760e+09, 4.63123446e+09, ..., 4.60130762e+09, 4.60093232e+09, 4.60327930e+09]) . data2.dtypes . 접수일시 datetime64[ns] 예정일시 datetime64[ns] 배차일시 datetime64[ns] 승차일시 datetime64[ns] 출발(구) object 출발(동) object 도착(구) object 도착(동) object 요금(원) int64 휠체어이용여부 object 장애등급명 object 접수방법 object 예정-접수 float64 배차-예정 float64 배차-접수 float64 승차-접수 float64 승차-예정 float64 승차-배차 timedelta64[ns] 1분 timedelta64[ns] 5분 timedelta64[ns] 0분 timedelta64[ns] 대기시간m float64 예정일 datetime64[ns] 예정시 datetime64[ns] 승차일 datetime64[ns] 승차시 datetime64[ns] dtype: object . data2[&#39;승차-배차&#39;].values.view(&#39;&lt;i8&#39;)/10**9 . array([ 5.96 , 9.043, 3.02 , ..., 975.1 , 1926.297, 2994.297]) . data2.dtypes . 접수일시 datetime64[ns] 예정일시 datetime64[ns] 배차일시 datetime64[ns] 승차일시 datetime64[ns] 출발(구) object 출발(동) object 도착(구) object 도착(동) object 요금(원) int64 휠체어이용여부 object 장애등급명 object 접수방법 object 예정-접수 float64 배차-예정 float64 배차-접수 float64 승차-접수 float64 승차-예정 float64 승차-배차 timedelta64[ns] 1분 timedelta64[ns] 5분 timedelta64[ns] 0분 timedelta64[ns] 대기시간m float64 예정일 datetime64[ns] 예정시 datetime64[ns] 승차일 datetime64[ns] 승차시 datetime64[ns] dtype: object . data2.corr() . 요금(원) 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 대기시간m . 요금(원) | 1.000000 | 0.048840 | 0.077976 | 0.059531 | 0.062417 | 0.098441 | 0.098441 | . 예정-접수 | 0.048840 | 1.000000 | -0.244228 | 0.992887 | 0.992317 | -0.231047 | -0.231047 | . 배차-예정 | 0.077976 | -0.244228 | 1.000000 | -0.127034 | -0.125677 | 0.973960 | 0.973960 | . 배차-접수 | 0.059531 | 0.992887 | -0.127034 | 1.000000 | 0.999584 | -0.116749 | -0.116749 | . 승차-접수 | 0.062417 | 0.992317 | -0.125677 | 0.999584 | 1.000000 | -0.108899 | -0.108899 | . 승차-예정 | 0.098441 | -0.231047 | 0.973960 | -0.116749 | -0.108899 | 1.000000 | 1.000000 | . 대기시간m | 0.098441 | -0.231047 | 0.973960 | -0.116749 | -0.108899 | 1.000000 | 1.000000 | . data2.cov() . 요금(원) 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 대기시간m . 요금(원) | 892530.740058 | 13519.887645 | 2590.981620 | 16110.869265 | 16911.507373 | 3391.619728 | 3391.619728 | . 예정-접수 | 13519.887645 | 85856.643194 | -2516.941203 | 83339.701991 | 83387.729375 | -2468.913819 | -2468.913819 | . 배차-예정 | 2590.981620 | -2516.941203 | 1237.037866 | -1279.903337 | -1267.686635 | 1249.254569 | 1249.254569 | . 배차-접수 | 16110.869265 | 83339.701991 | -1279.903337 | 82059.798654 | 82120.042740 | -1219.659251 | -1219.659251 | . 승차-접수 | 16911.507373 | 83387.729375 | -1267.686635 | 82120.042740 | 82248.769647 | -1138.959728 | -1138.959728 | . 승차-예정 | 3391.619728 | -2468.913819 | 1249.254569 | -1219.659251 | -1138.959728 | 1329.954091 | 1329.954091 | . 대기시간m | 3391.619728 | -2468.913819 | 1249.254569 | -1219.659251 | -1138.959728 | 1329.954091 | 1329.954091 | . plt.figure(figsize=(15,15)) sns.heatmap(data = data2.corr(), annot=True, fmt = &#39;.2f&#39;, linewidths=.5, cmap=&#39;Blues&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1de824e6b48&gt; . library(corrplot) corrplot(cor(acs2,use=&quot;na.or.complete&quot;),mtehod=&#39;number&#39;) . data2.columns . Index([&#39;접수일시&#39;, &#39;예정일시&#39;, &#39;배차일시&#39;, &#39;승차일시&#39;, &#39;출발(구)&#39;, &#39;출발(동)&#39;, &#39;도착(구)&#39;, &#39;도착(동)&#39;, &#39;요금(원)&#39;, &#39;휠체어이용여부&#39;, &#39;장애등급명&#39;, &#39;접수방법&#39;, &#39;예정-접수&#39;, &#39;배차-예정&#39;, &#39;배차-접수&#39;, &#39;승차-접수&#39;, &#39;승차-예정&#39;, &#39;승차-배차&#39;, &#39;1분&#39;, &#39;5분&#39;, &#39;0분&#39;, &#39;대기시간m&#39;, &#39;예정일&#39;, &#39;예정시&#39;, &#39;승차일&#39;, &#39;승차시&#39;], dtype=&#39;object&#39;) . data3=data2[[&#39;승차일시&#39;,&#39;출발(구)&#39;,&#39;출발(동)&#39;,&#39;도착(구)&#39;,&#39;도착(동)&#39;,&#39;요금(원)&#39;,&#39;휠체어이용여부&#39;,&#39;장애등급명&#39;,&#39;접수방법&#39;,&#39;예정-접수&#39;,&#39;배차-예정&#39;,&#39;배차-접수&#39;,&#39;승차-접수&#39;,&#39;승차-예정&#39;,&#39;승차-배차&#39;,&#39;대기시간m&#39;]].copy() . data3.head() . 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 장애등급명 접수방법 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 대기시간m . 0 | 2019-01-04 16:26:07.347 | 강동구 | 고덕제1동 | 하남시 | 풍산동 | 1700 | X | 뇌병2급 | 바로콜 | 00:00:45 | 00:00:01.387000 | 00:00:46.387000 | 00:00:52.347000 | 00:00:07.347000 | 00:00:05.960000 | 0.122450 | . 1 | 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | 지적1급 | 바로콜 | 00:01:03 | 00:00:00.687000 | 00:01:03.687000 | 00:01:12.730000 | 00:00:09.730000 | 00:00:09.043000 | 0.162167 | . 2 | 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | 지체2급 | 바로콜 | 00:42:54 | 00:00:07.027000 | 00:43:01.027000 | 00:43:04.047000 | 00:00:10.047000 | 00:00:03.020000 | 0.167450 | . 3 | 2018-12-17 14:36:11.217 | 용인시기흥구 | 동백동 | 종로구 | 종로1.2.3.4가동 | 5200 | ○ | 뇌병2급 | 바로콜 | 00:00:15 | 00:00:05.180000 | 00:00:20.180000 | 00:00:26.217000 | 00:00:11.217000 | 00:00:06.037000 | 0.186950 | . 4 | 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | 지체2급 | 바로콜 | 01:26:56 | 00:00:03.633000 | 01:26:59.633000 | 01:27:08.730000 | 00:00:12.730000 | 00:00:09.097000 | 0.212167 | . data3.tail() . 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 장애등급명 접수방법 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 대기시간m . 742674 | 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | 뇌병1급 | 바로콜 | 00:00:02.080000 | 05:47:44.497000 | 05:47:46.577000 | 06:16:58.820000 | 06:16:56.740000 | 00:29:12.243000 | 376.945667 | . 742675 | 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | 지적1급 | 바로콜 | 00:00:10 | 05:53:11.237000 | 05:53:21.237000 | 06:17:21.343000 | 06:17:11.343000 | 00:24:00.106000 | 377.189050 | . 742676 | 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | 뇌병2급 | 바로콜 | 00:00:25.433000 | 06:01:40.793000 | 06:02:06.226000 | 06:18:21.326000 | 06:17:55.893000 | 00:16:15.100000 | 377.931550 | . 742677 | 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | 뇌병2급 | 바로콜 | 00:00:24.183000 | 06:02:00.020000 | 06:02:24.203000 | 06:34:30.500000 | 06:34:06.317000 | 00:32:06.297000 | 394.105283 | . 742678 | 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | 지체2급 | 바로콜 | 00:00:34 | 06:06:02.890000 | 06:06:36.890000 | 06:56:31.187000 | 06:55:57.187000 | 00:49:54.297000 | 415.953117 | . data3.sort_values(by = &#39;승차일시&#39;, ascending = False) . 승차일시 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 장애등급명 접수방법 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 대기시간m . 693247 | 2019-09-30 23:53:13.320 | 강서구 | 공항동 | 관악구 | 신림동 | 3300 | ○ | 지체1급 | 바로콜 | 00:00:54 | 01:31:24.897000 | 01:32:18.897000 | 02:04:07.320000 | 02:03:13.320000 | 00:31:48.423000 | 123.222000 | . 719207 | 2019-09-30 23:51:59.187 | 강서구 | 공항동 | 성북구 | 길음제1동 | 4300 | X | 지체1급 | 바로콜 | 00:00:00.787000 | 01:52:04.833000 | 01:52:05.620000 | 02:23:59.974000 | 02:23:59.187000 | 00:31:54.354000 | 143.986450 | . 655987 | 2019-09-30 23:49:34.567 | 강서구 | 화곡제8동 | 강서구 | 화곡본동 | 1500 | ○ | 지체2급 | 바로콜 | 00:00:27.203000 | 01:20:31.433000 | 01:20:58.636000 | 01:47:01.770000 | 01:46:34.567000 | 00:26:03.134000 | 106.576117 | . 605105 | 2019-09-30 23:48:12.020 | 종로구 | 교남동 | 은평구 | 신사제1동 | 2300 | ○ | 지체1급 | 바로콜 | 00:00:56 | 01:06:14.660000 | 01:07:10.660000 | 01:33:08.020000 | 01:32:12.020000 | 00:25:57.360000 | 92.200333 | . 213344 | 2019-09-30 23:46:48.720 | 송파구 | 잠실6동 | 남양주시 | 진접읍 | 4600 | X | 지체2급 | 바로콜 | 00:00:23 | 00:07:12.450000 | 00:07:35.450000 | 00:38:11.720000 | 00:37:48.720000 | 00:30:36.270000 | 37.812000 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 119881 | 2018-10-01 02:34:29.407 | 강남구 | 수서동 | 용산구 | 남영동 | 3500 | X | 지체2급 | 바로콜 | 00:00:55 | 00:20:21.377000 | 00:21:16.377000 | 00:29:24.407000 | 00:28:29.407000 | 00:08:08.030000 | 28.490117 | . 363067 | 2018-10-01 01:23:22.660 | 은평구 | 신사제1동 | 서대문구 | 북가좌제2동 | 1500 | X | 지체2급 | 바로콜 | 00:00:45 | 00:46:23.247000 | 00:47:08.247000 | 00:55:07.660000 | 00:54:22.660000 | 00:07:59.413000 | 54.377667 | . 624814 | 2018-10-01 00:50:05.160 | 서초구 | 양재2동 | 강남구 | 세곡동 | 2000 | X | 자폐1급 | 바로콜 | 00:00:58 | 00:53:09.327000 | 00:54:07.327000 | 01:38:03.160000 | 01:37:05.160000 | 00:43:55.833000 | 97.086000 | . 222000 | 2018-10-01 00:26:41.430 | 구로구 | 신도림동 | 구로구 | 구로제3동 | 1500 | ○ | 뇌병2급 | 바로콜 | 00:00:14.133000 | 00:11:17.190000 | 00:11:31.323000 | 00:38:55.563000 | 00:38:41.430000 | 00:27:24.240000 | 38.690500 | . 31427 | 2018-10-01 00:15:15.300 | 노원구 | 하계1동 | 노원구 | 중계4동 | 1500 | X | 지체2급 | 바로콜 | 00:00:49 | 00:08:21.787000 | 00:09:10.787000 | 00:19:04.300000 | 00:18:15.300000 | 00:09:53.513000 | 18.255000 | . 742679 rows × 16 columns . data4=data3.set_index(&quot;승차일시&quot;) #승차일시를 인덱스로 한 데이터 프레임 생성 . data4 . 출발(구) 출발(동) 도착(구) 도착(동) 요금(원) 휠체어이용여부 장애등급명 접수방법 예정-접수 배차-예정 배차-접수 승차-접수 승차-예정 승차-배차 대기시간m . 승차일시 . 2019-01-04 16:26:07.347 | 강동구 | 고덕제1동 | 하남시 | 풍산동 | 1700 | X | 뇌병2급 | 바로콜 | 00:00:45 | 00:00:01.387000 | 00:00:46.387000 | 00:00:52.347000 | 00:00:07.347000 | 00:00:05.960000 | 0.122450 | . 2018-12-18 10:32:09.730 | 동대문구 | 제기제2동 | 노원구 | 하계1동 | 2300 | ○ | 지적1급 | 바로콜 | 00:01:03 | 00:00:00.687000 | 00:01:03.687000 | 00:01:12.730000 | 00:00:09.730000 | 00:00:09.043000 | 0.162167 | . 2018-12-28 22:00:10.047 | 광진구 | 자양제2동 | 동대문구 | 답십리제1동 | 2000 | ○ | 지체2급 | 바로콜 | 00:42:54 | 00:00:07.027000 | 00:43:01.027000 | 00:43:04.047000 | 00:00:10.047000 | 00:00:03.020000 | 0.167450 | . 2018-12-17 14:36:11.217 | 용인시기흥구 | 동백동 | 종로구 | 종로1.2.3.4가동 | 5200 | ○ | 뇌병2급 | 바로콜 | 00:00:15 | 00:00:05.180000 | 00:00:20.180000 | 00:00:26.217000 | 00:00:11.217000 | 00:00:06.037000 | 0.186950 | . 2018-11-19 16:40:12.730 | 도봉구 | 창제5동 | 강북구 | 번제3동 | 1500 | X | 지체2급 | 바로콜 | 01:26:56 | 00:00:03.633000 | 01:26:59.633000 | 01:27:08.730000 | 00:00:12.730000 | 00:00:09.097000 | 0.212167 | . ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 2019-01-30 22:14:56.740 | 관악구 | 조원동 | 도봉구 | 방학제2동 | 4900 | ○ | 뇌병1급 | 바로콜 | 00:00:02.080000 | 05:47:44.497000 | 05:47:46.577000 | 06:16:58.820000 | 06:16:56.740000 | 00:29:12.243000 | 376.945667 | . 2019-03-01 01:30:11.343 | 강남구 | 역삼1동 | 강북구 | 삼양동 | 3600 | X | 지적1급 | 바로콜 | 00:00:10 | 05:53:11.237000 | 05:53:21.237000 | 06:17:21.343000 | 06:17:11.343000 | 00:24:00.106000 | 377.189050 | . 2019-01-30 23:43:55.893 | 영등포구 | 영등포동 | 강북구 | 번제2동 | 4000 | ○ | 뇌병2급 | 바로콜 | 00:00:25.433000 | 06:01:40.793000 | 06:02:06.226000 | 06:18:21.326000 | 06:17:55.893000 | 00:16:15.100000 | 377.931550 | . 2019-01-30 23:49:06.317 | 동작구 | 신대방제2동 | 노원구 | 월계2동 | 4300 | ○ | 뇌병2급 | 바로콜 | 00:00:24.183000 | 06:02:00.020000 | 06:02:24.203000 | 06:34:30.500000 | 06:34:06.317000 | 00:32:06.297000 | 394.105283 | . 2019-03-01 04:12:57.187 | 중랑구 | 망우본동 | 강서구 | 화곡제4동 | 4500 | X | 지체2급 | 바로콜 | 00:00:34 | 06:06:02.890000 | 06:06:36.890000 | 06:56:31.187000 | 06:55:57.187000 | 00:49:54.297000 | 415.953117 | . 742679 rows × 15 columns . from datetime import datetime from datetime import timedelta #timedelta를 더하거나 뺄 수 있음. from dateutil.parser import parse import pandas as pd import numpy as np from pandas import DataFrame, Series from pandas.tseries.offsets import Day,MonthEnd import pytz . data4.dtypes . 출발(구) object 출발(동) object 도착(구) object 도착(동) object 요금(원) int64 휠체어이용여부 object 장애등급명 object 접수방법 object 예정-접수 timedelta64[ns] 배차-예정 timedelta64[ns] 배차-접수 timedelta64[ns] 승차-접수 timedelta64[ns] 승차-예정 timedelta64[ns] 승차-배차 timedelta64[ns] 대기시간m float64 dtype: object . data4.index.is_unique . False . data4.index . DatetimeIndex([&#39;2019-01-04 16:26:07.347000&#39;, &#39;2018-12-18 10:32:09.730000&#39;, &#39;2018-12-28 22:00:10.047000&#39;, &#39;2018-12-17 14:36:11.217000&#39;, &#39;2018-11-19 16:40:12.730000&#39;, &#39;2019-03-26 10:15:12.837000&#39;, &#39;2018-10-07 15:18:13.130000&#39;, &#39;2019-04-19 17:53:13.433000&#39;, &#39;2018-11-26 12:50:13.457000&#39;, &#39;2019-03-22 11:38:13.760000&#39;, ... &#39;2019-03-01 05:11:41.247000&#39;, &#39;2019-01-30 21:47:44.960000&#39;, &#39;2019-01-30 22:12:29.577000&#39;, &#39;2019-03-01 00:32:50.073000&#39;, &#39;2019-03-01 03:23:52.583000&#39;, &#39;2019-01-30 22:14:56.740000&#39;, &#39;2019-03-01 01:30:11.343000&#39;, &#39;2019-01-30 23:43:55.893000&#39;, &#39;2019-01-30 23:49:06.317000&#39;, &#39;2019-03-01 04:12:57.187000&#39;], dtype=&#39;datetime64[ns]&#39;, name=&#39;승차일시&#39;, length=742679, freq=None) . data4_month=data4.resample(&#39;BM&#39;).mean()#각월 마지막 영업일 . data4_month . 요금(원) 대기시간m . 승차일시 . 2018-10-31 | 2360.994981 | 69.089981 | . 2018-11-30 | 2353.539371 | 72.769882 | . 2018-12-31 | 2352.053548 | 82.549172 | . 2019-01-31 | 2304.375455 | 54.305684 | . 2019-02-28 | 2324.532626 | 62.011093 | . 2019-03-29 | 2301.061222 | 64.993703 | . 2019-04-30 | 2314.207977 | 59.378633 | . 2019-05-31 | 2335.620622 | 63.442602 | . 2019-06-28 | 2343.975200 | 62.934245 | . 2019-07-31 | 2318.540776 | 54.159864 | . 2019-08-30 | 2304.582397 | 55.456087 | . 2019-09-30 | 2344.674648 | 61.614397 | . graph=data4[&#39;대기시간m&#39;].plot(title=&#39;대기시간&#39;) a=graph.get_figure() a.set_size_inches(12.5,9) . graph=data4[&#39;대기시간m&#39;].plot(title=&#39;대기시간&#39;) a=graph.get_figure() a.set_size_inches(12.5,9) . weekly_data = data4.resample(&#39;W-Mon&#39;, how={&#39;대기시간m&#39;:np.mean}).fillna(0) #월요일 기준 주별로 데이터 정리, 대기시간 평균 #data4의 대기시간을 numpy의 mean(평균)함수로 처리한다는 의미입니다. #fillna(0)는 값이 없는 na 레코드가 있다면 0을 넣겠다는 의미 . C: Users Angie Anaconda3 lib site-packages ipykernel_launcher.py:1: FutureWarning: how in .resample() is deprecated the new syntax is .resample(...)..apply(&lt;func&gt;) &#34;&#34;&#34;Entry point for launching an IPython kernel. . weekly_data2=weekly_data.reset_index() . weekly_data2 . 승차일시 대기시간m . 0 | 2018-10-01 | 65.702619 | . 1 | 2018-10-08 | 63.858869 | . 2 | 2018-10-15 | 65.752838 | . 3 | 2018-10-22 | 69.646992 | . 4 | 2018-10-29 | 75.428655 | . 5 | 2018-11-05 | 66.168030 | . 6 | 2018-11-12 | 73.365205 | . 7 | 2018-11-19 | 76.658092 | . 8 | 2018-11-26 | 75.055981 | . 9 | 2018-12-03 | 77.300263 | . 10 | 2018-12-10 | 85.053361 | . 11 | 2018-12-17 | 85.784207 | . 12 | 2018-12-24 | 87.946133 | . 13 | 2018-12-31 | 69.112239 | . 14 | 2019-01-07 | 42.764176 | . 15 | 2019-01-14 | 50.576178 | . 16 | 2019-01-21 | 52.680825 | . 17 | 2019-01-28 | 57.477238 | . 18 | 2019-02-04 | 65.154387 | . 19 | 2019-02-11 | 53.076588 | . 20 | 2019-02-18 | 64.573494 | . 21 | 2019-02-25 | 66.104437 | . 22 | 2019-03-04 | 62.605435 | . 23 | 2019-03-11 | 63.584212 | . 24 | 2019-03-18 | 68.299423 | . 25 | 2019-03-25 | 64.738272 | . 26 | 2019-04-01 | 62.792134 | . 27 | 2019-04-08 | 56.994304 | . 28 | 2019-04-15 | 61.039655 | . 29 | 2019-04-22 | 61.148610 | . 30 | 2019-04-29 | 61.545245 | . 31 | 2019-05-06 | 55.743901 | . 32 | 2019-05-13 | 65.623551 | . 33 | 2019-05-20 | 64.920888 | . 34 | 2019-05-27 | 64.644991 | . 35 | 2019-06-03 | 62.214137 | . 36 | 2019-06-10 | 57.676786 | . 37 | 2019-06-17 | 61.997776 | . 38 | 2019-06-24 | 65.729927 | . 39 | 2019-07-01 | 63.676569 | . 40 | 2019-07-08 | 51.347578 | . 41 | 2019-07-15 | 54.587087 | . 42 | 2019-07-22 | 55.674772 | . 43 | 2019-07-29 | 55.659815 | . 44 | 2019-08-05 | 52.835157 | . 45 | 2019-08-12 | 56.516669 | . 46 | 2019-08-19 | 51.759828 | . 47 | 2019-08-26 | 58.193810 | . 48 | 2019-09-02 | 59.283702 | . 49 | 2019-09-09 | 63.691691 | . 50 | 2019-09-16 | 54.609439 | . 51 | 2019-09-23 | 61.401497 | . 52 | 2019-09-30 | 65.277990 | . sns.pointplot(data=weekly_data2,x=&#39;승차일시&#39;,y=&#39;대기시간m&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1de82212f48&gt; . plt.rcParams[&#39;font.family&#39;] = &#39;NanumGothic&#39; plt.rcParams[&#39;font.family&#39;] = &#39;Malgun Gothic&#39; . monthly_data = data4.resample(&#39;M&#39;, how={&#39;대기시간m&#39;:np.mean}).fillna(0) #월별기준 데이터 정리, 대기시간 평균 . C: Users Angie Anaconda3 lib site-packages ipykernel_launcher.py:1: FutureWarning: how in .resample() is deprecated the new syntax is .resample(...)..apply(&lt;func&gt;) &#34;&#34;&#34;Entry point for launching an IPython kernel. . monthly_data . 대기시간m . 승차일시 . 2018-10-31 | 69.089981 | . 2018-11-30 | 72.769882 | . 2018-12-31 | 82.549172 | . 2019-01-31 | 54.305684 | . 2019-02-28 | 62.011093 | . 2019-03-31 | 64.522805 | . 2019-04-30 | 59.620762 | . 2019-05-31 | 63.442602 | . 2019-06-30 | 62.286586 | . 2019-07-31 | 54.437304 | . 2019-08-31 | 55.506144 | . 2019-09-30 | 61.688819 | . monthly_data2=monthly_data.reset_index() . sns.pointplot(data=monthly_data2,x=&#39;승차일시&#39;,y=&#39;대기시간m&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1de823d6188&gt; . aaa=monthly_data2.groupby(monthly_data2.승차일시) . aaa . &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000001DE8246A148&gt; . predict=&quot;Waiting Time&quot; . predict_waiting=aaa.get_group(predict)[[&#39;승차일시&#39;,&#39;대기시간m&#39;]].reset_index(drop=TRUE) . ValueError Traceback (most recent call last) pandas _libs tslibs conversion.pyx in pandas._libs.tslibs.conversion.convert_str_to_tsobject() pandas _libs tslibs parsing.pyx in pandas._libs.tslibs.parsing.parse_datetime_string() ~ Anaconda3 lib site-packages dateutil parser _parser.py in parse(timestr, parserinfo, **kwargs) 1357 else: -&gt; 1358 return DEFAULTPARSER.parse(timestr, **kwargs) 1359 ~ Anaconda3 lib site-packages dateutil parser _parser.py in parse(self, timestr, default, ignoretz, tzinfos, **kwargs) 648 if res is None: --&gt; 649 raise ValueError(&#34;Unknown string format:&#34;, timestr) 650 ValueError: (&#39;Unknown string format:&#39;, &#39;Waiting Time&#39;) During handling of the above exception, another exception occurred: ValueError Traceback (most recent call last) &lt;ipython-input-134-3733f63b0035&gt; in &lt;module&gt; -&gt; 1 predict_waiting=aaa.get_group(predict)[[&#39;승차일시&#39;,&#39;대기시간m&#39;]].reset_index(drop=TRUE) ~ Anaconda3 lib site-packages pandas core groupby groupby.py in get_group(self, name, obj) 676 obj = self._selected_obj 677 --&gt; 678 inds = self._get_index(name) 679 if not len(inds): 680 raise KeyError(name) ~ Anaconda3 lib site-packages pandas core groupby groupby.py in _get_index(self, name) 489 Safe get index, translate keys for datelike to underlying repr. 490 &#34;&#34;&#34; --&gt; 491 return self._get_indices([name])[0] 492 493 @cache_readonly ~ Anaconda3 lib site-packages pandas core groupby groupby.py in _get_indices(self, names) 483 names = (converter(name) for name in names) 484 --&gt; 485 return [self.indices.get(name, []) for name in names] 486 487 def _get_index(self, name): ~ Anaconda3 lib site-packages pandas core groupby groupby.py in &lt;listcomp&gt;(.0) 483 names = (converter(name) for name in names) 484 --&gt; 485 return [self.indices.get(name, []) for name in names] 486 487 def _get_index(self, name): ~ Anaconda3 lib site-packages pandas core groupby groupby.py in &lt;genexpr&gt;(.0) 481 else: 482 converter = get_converter(index_sample) --&gt; 483 names = (converter(name) for name in names) 484 485 return [self.indices.get(name, []) for name in names] ~ Anaconda3 lib site-packages pandas core groupby groupby.py in &lt;lambda&gt;(key) 445 # in the indices, could be a Timestamp or a np.datetime64 446 if isinstance(s, (Timestamp, datetime.datetime)): --&gt; 447 return lambda key: Timestamp(key) 448 elif isinstance(s, np.datetime64): 449 return lambda key: Timestamp(key).asm8 pandas _libs tslibs timestamps.pyx in pandas._libs.tslibs.timestamps.Timestamp.__new__() pandas _libs tslibs conversion.pyx in pandas._libs.tslibs.conversion.convert_to_tsobject() pandas _libs tslibs conversion.pyx in pandas._libs.tslibs.conversion.convert_str_to_tsobject() ValueError: could not convert string to Timestamp . idx = pd.date_range(&#39;2019-10-01&#39;, &#39;2019-09-30&#39;) df = pd.DataFrame({&#39;x&#39;:np.cumsum(np.random.normal(0, 1, len(idx))*10)}, index = idx) plt.figure(figsize=(15, 5)) plt.plot(df.index, df[&#39;x&#39;]) plt.plot(df.resample(&#39;W&#39;).mean(), label=&#39;Week&#39;) plt.plot(df.resample(&#39;M&#39;).mean(), label=&#39;Month&#39;) plt.plot(df.rolling(180).mean(), label=&#39;180D&#39;) plt.plot(df.resample(&#39;A&#39;).mean(), label=&#39;annual&#39;) plt.legend() plt.savefig(&quot;../../assets/images/markdown_img/180612_1422_df_time_series.svg&quot;) plt.show() . C: Users Angie Anaconda3 lib site-packages pandas plotting _matplotlib converter.py:103: FutureWarning: Using an implicitly registered datetime converter for a matplotlib plotting method. The converter was registered by pandas on import. Future versions of pandas will require you to explicitly register matplotlib converters. To register the converters: &gt;&gt;&gt; from pandas.plotting import register_matplotlib_converters &gt;&gt;&gt; register_matplotlib_converters() warnings.warn(msg, FutureWarning) . FileNotFoundError Traceback (most recent call last) &lt;ipython-input-75-e68d7ba429a1&gt; in &lt;module&gt; 10 plt.plot(df.resample(&#39;A&#39;).mean(), label=&#39;annual&#39;) 11 plt.legend() &gt; 12 plt.savefig(&#34;../../assets/images/markdown_img/180612_1422_df_time_series.svg&#34;) 13 plt.show() ~ Anaconda3 lib site-packages matplotlib pyplot.py in savefig(*args, **kwargs) 720 def savefig(*args, **kwargs): 721 fig = gcf() --&gt; 722 res = fig.savefig(*args, **kwargs) 723 fig.canvas.draw_idle() # need this if &#39;transparent=True&#39; to reset colors 724 return res ~ Anaconda3 lib site-packages matplotlib figure.py in savefig(self, fname, transparent, **kwargs) 2178 self.patch.set_visible(frameon) 2179 -&gt; 2180 self.canvas.print_figure(fname, **kwargs) 2181 2182 if frameon: ~ Anaconda3 lib site-packages matplotlib backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs) 2080 orientation=orientation, 2081 bbox_inches_restore=_bbox_inches_restore, -&gt; 2082 **kwargs) 2083 finally: 2084 if bbox_inches and restore_bbox: ~ Anaconda3 lib site-packages matplotlib backends backend_svg.py in print_svg(self, filename, *args, **kwargs) 1188 1189 def print_svg(self, filename, *args, **kwargs): -&gt; 1190 with cbook.open_file_cm(filename, &#34;w&#34;, encoding=&#34;utf-8&#34;) as fh: 1191 1192 filename = getattr(fh, &#39;name&#39;, &#39;&#39;) ~ Anaconda3 lib contextlib.py in __enter__(self) 110 del self.args, self.kwds, self.func 111 try: --&gt; 112 return next(self.gen) 113 except StopIteration: 114 raise RuntimeError(&#34;generator didn&#39;t yield&#34;) from None ~ Anaconda3 lib site-packages matplotlib cbook __init__.py in open_file_cm(path_or_file, mode, encoding) 445 def open_file_cm(path_or_file, mode=&#34;r&#34;, encoding=None): 446 r&#34;&#34;&#34;Pass through file objects and context-manage `.PathLike` s.&#34;&#34;&#34; --&gt; 447 fh, opened = to_filehandle(path_or_file, mode, True, encoding) 448 if opened: 449 with fh: ~ Anaconda3 lib site-packages matplotlib cbook __init__.py in to_filehandle(fname, flag, return_opened, encoding) 430 fh = bz2.BZ2File(fname, flag) 431 else: --&gt; 432 fh = open(fname, flag, encoding=encoding) 433 opened = True 434 elif hasattr(fname, &#39;seek&#39;): FileNotFoundError: [Errno 2] No such file or directory: &#39;../../assets/images/markdown_img/180612_1422_df_time_series.svg&#39; .",
            "url": "https://chy0206.github.io/chy0206.github.io/2020/04/21/Call-Taxi-for-Disabled.html",
            "relUrl": "/2020/04/21/Call-Taxi-for-Disabled.html",
            "date": " • Apr 21, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://chy0206.github.io/chy0206.github.io/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://chy0206.github.io/chy0206.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://chy0206.github.io/chy0206.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}